
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004260  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800436c  0800436c  0001436c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800447c  0800447c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800447c  0800447c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800447c  0800447c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800447c  0800447c  0001447c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004480  08004480  00014480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000068  080044ec  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  080044ec  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d50f  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002143  00000000  00000000  0002d5e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  0002f728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac6  00000000  00000000  000304f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000190ea  00000000  00000000  00030fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fd3c  00000000  00000000  0004a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090f3b  00000000  00000000  00059de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000448c  00000000  00000000  000ead20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000ef1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004354 	.word	0x08004354

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004354 	.word	0x08004354

0800014c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681a      	ldr	r2, [r3, #0]
 8000158:	4b09      	ldr	r3, [pc, #36]	; (8000180 <HAL_UART_RxCpltCallback+0x34>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	429a      	cmp	r2, r3
 800015e:	d10a      	bne.n	8000176 <HAL_UART_RxCpltCallback+0x2a>
		HAL_UART_Transmit(&huart2, &temp, sizeof(temp), 10);
 8000160:	230a      	movs	r3, #10
 8000162:	2201      	movs	r2, #1
 8000164:	4907      	ldr	r1, [pc, #28]	; (8000184 <HAL_UART_RxCpltCallback+0x38>)
 8000166:	4806      	ldr	r0, [pc, #24]	; (8000180 <HAL_UART_RxCpltCallback+0x34>)
 8000168:	f002 f91a 	bl	80023a0 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 800016c:	2201      	movs	r2, #1
 800016e:	4905      	ldr	r1, [pc, #20]	; (8000184 <HAL_UART_RxCpltCallback+0x38>)
 8000170:	4803      	ldr	r0, [pc, #12]	; (8000180 <HAL_UART_RxCpltCallback+0x34>)
 8000172:	f002 f998 	bl	80024a6 <HAL_UART_Receive_IT>
	}
}
 8000176:	bf00      	nop
 8000178:	3708      	adds	r7, #8
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	200000fc 	.word	0x200000fc
 8000184:	20000144 	.word	0x20000144

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b086      	sub	sp, #24
 800018c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018e:	f000 fb77 	bl	8000880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000192:	f000 f841 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000196:	f000 f943 	bl	8000420 <MX_GPIO_Init>
  MX_ADC1_Init();
 800019a:	f000 f88d 	bl	80002b8 <MX_ADC1_Init>
  MX_TIM2_Init();
 800019e:	f000 f8c9 	bl	8000334 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80001a2:	f000 f913 	bl	80003cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, &temp, 1);
 80001a6:	2201      	movs	r2, #1
 80001a8:	4917      	ldr	r1, [pc, #92]	; (8000208 <main+0x80>)
 80001aa:	4818      	ldr	r0, [pc, #96]	; (800020c <main+0x84>)
 80001ac:	f002 f97b 	bl	80024a6 <HAL_UART_Receive_IT>
	char str[20];
	uint16_t pre_ADC_value = 0;
 80001b0:	2300      	movs	r3, #0
 80001b2:	82bb      	strh	r3, [r7, #20]
	uint16_t ADC_value = 45;
 80001b4:	232d      	movs	r3, #45	; 0x2d
 80001b6:	82fb      	strh	r3, [r7, #22]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		pre_ADC_value = ADC_value;
 80001b8:	8afb      	ldrh	r3, [r7, #22]
 80001ba:	82bb      	strh	r3, [r7, #20]
		ADC_value = rand()%4096;//HAL_ADC_GetValue(&hadc1);
 80001bc:	f002 ff18 	bl	8002ff0 <rand>
 80001c0:	4603      	mov	r3, r0
 80001c2:	425a      	negs	r2, r3
 80001c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80001c8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80001cc:	bf58      	it	pl
 80001ce:	4253      	negpl	r3, r2
 80001d0:	82fb      	strh	r3, [r7, #22]
		if (pre_ADC_value != ADC_value)
 80001d2:	8aba      	ldrh	r2, [r7, #20]
 80001d4:	8afb      	ldrh	r3, [r7, #22]
 80001d6:	429a      	cmp	r2, r3
 80001d8:	d00c      	beq.n	80001f4 <main+0x6c>
			HAL_UART_Transmit(&huart2, (void*) str,
					sprintf(str, "%u\r\n", (unsigned int) ADC_value), 10);
 80001da:	8afa      	ldrh	r2, [r7, #22]
 80001dc:	463b      	mov	r3, r7
 80001de:	490c      	ldr	r1, [pc, #48]	; (8000210 <main+0x88>)
 80001e0:	4618      	mov	r0, r3
 80001e2:	f002 fff3 	bl	80031cc <siprintf>
 80001e6:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (void*) str,
 80001e8:	b29a      	uxth	r2, r3
 80001ea:	4639      	mov	r1, r7
 80001ec:	230a      	movs	r3, #10
 80001ee:	4807      	ldr	r0, [pc, #28]	; (800020c <main+0x84>)
 80001f0:	f002 f8d6 	bl	80023a0 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f8:	4806      	ldr	r0, [pc, #24]	; (8000214 <main+0x8c>)
 80001fa:	f001 f935 	bl	8001468 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80001fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000202:	f000 fb9f 	bl	8000944 <HAL_Delay>
		pre_ADC_value = ADC_value;
 8000206:	e7d7      	b.n	80001b8 <main+0x30>
 8000208:	20000144 	.word	0x20000144
 800020c:	200000fc 	.word	0x200000fc
 8000210:	0800436c 	.word	0x0800436c
 8000214:	40011000 	.word	0x40011000

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b094      	sub	sp, #80	; 0x50
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f003 f833 	bl	8003292 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	f107 0314 	add.w	r3, r7, #20
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000248:	2302      	movs	r3, #2
 800024a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024c:	2301      	movs	r3, #1
 800024e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000250:	2310      	movs	r3, #16
 8000252:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000254:	2300      	movs	r3, #0
 8000256:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800025c:	4618      	mov	r0, r3
 800025e:	f001 f91d 	bl	800149c <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000268:	f000 f91a 	bl	80004a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	230f      	movs	r3, #15
 800026e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000270:	2300      	movs	r3, #0
 8000272:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fb8a 	bl	80019a0 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000292:	f000 f905 	bl	80004a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000296:	2302      	movs	r3, #2
 8000298:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 fd0b 	bl	8001cbc <HAL_RCCEx_PeriphCLKConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002ac:	f000 f8f8 	bl	80004a0 <Error_Handler>
  }
}
 80002b0:	bf00      	nop
 80002b2:	3750      	adds	r7, #80	; 0x50
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002c8:	4b18      	ldr	r3, [pc, #96]	; (800032c <MX_ADC1_Init+0x74>)
 80002ca:	4a19      	ldr	r2, [pc, #100]	; (8000330 <MX_ADC1_Init+0x78>)
 80002cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ce:	4b17      	ldr	r3, [pc, #92]	; (800032c <MX_ADC1_Init+0x74>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002d4:	4b15      	ldr	r3, [pc, #84]	; (800032c <MX_ADC1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002da:	4b14      	ldr	r3, [pc, #80]	; (800032c <MX_ADC1_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <MX_ADC1_Init+0x74>)
 80002e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002e8:	4b10      	ldr	r3, [pc, #64]	; (800032c <MX_ADC1_Init+0x74>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002ee:	4b0f      	ldr	r3, [pc, #60]	; (800032c <MX_ADC1_Init+0x74>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002f4:	480d      	ldr	r0, [pc, #52]	; (800032c <MX_ADC1_Init+0x74>)
 80002f6:	f000 fb49 	bl	800098c <HAL_ADC_Init>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000300:	f000 f8ce 	bl	80004a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000304:	2300      	movs	r3, #0
 8000306:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000308:	2301      	movs	r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800030c:	2307      	movs	r3, #7
 800030e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	4619      	mov	r1, r3
 8000314:	4805      	ldr	r0, [pc, #20]	; (800032c <MX_ADC1_Init+0x74>)
 8000316:	f000 fc11 	bl	8000b3c <HAL_ADC_ConfigChannel>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000320:	f000 f8be 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000084 	.word	0x20000084
 8000330:	40012400 	.word	0x40012400

08000334 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800033a:	f107 0308 	add.w	r3, r7, #8
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000348:	463b      	mov	r3, r7
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000350:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <MX_TIM2_Init+0x94>)
 8000352:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000356:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000358:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <MX_TIM2_Init+0x94>)
 800035a:	2207      	movs	r2, #7
 800035c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800035e:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <MX_TIM2_Init+0x94>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000364:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <MX_TIM2_Init+0x94>)
 8000366:	f240 32e7 	movw	r2, #999	; 0x3e7
 800036a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800036c:	4b16      	ldr	r3, [pc, #88]	; (80003c8 <MX_TIM2_Init+0x94>)
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000372:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <MX_TIM2_Init+0x94>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000378:	4813      	ldr	r0, [pc, #76]	; (80003c8 <MX_TIM2_Init+0x94>)
 800037a:	f001 fd55 	bl	8001e28 <HAL_TIM_Base_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000384:	f000 f88c 	bl	80004a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800038c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	4619      	mov	r1, r3
 8000394:	480c      	ldr	r0, [pc, #48]	; (80003c8 <MX_TIM2_Init+0x94>)
 8000396:	f001 fd96 	bl	8001ec6 <HAL_TIM_ConfigClockSource>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80003a0:	f000 f87e 	bl	80004a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a4:	2300      	movs	r3, #0
 80003a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a8:	2300      	movs	r3, #0
 80003aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003ac:	463b      	mov	r3, r7
 80003ae:	4619      	mov	r1, r3
 80003b0:	4805      	ldr	r0, [pc, #20]	; (80003c8 <MX_TIM2_Init+0x94>)
 80003b2:	f001 ff47 	bl	8002244 <HAL_TIMEx_MasterConfigSynchronization>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003bc:	f000 f870 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003c0:	bf00      	nop
 80003c2:	3718      	adds	r7, #24
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	200000b4 	.word	0x200000b4

080003cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003d0:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_USART2_UART_Init+0x4c>)
 80003d2:	4a12      	ldr	r2, [pc, #72]	; (800041c <MX_USART2_UART_Init+0x50>)
 80003d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80003d6:	4b10      	ldr	r3, [pc, #64]	; (8000418 <MX_USART2_UART_Init+0x4c>)
 80003d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_USART2_UART_Init+0x4c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_USART2_UART_Init+0x4c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_USART2_UART_Init+0x4c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_USART2_UART_Init+0x4c>)
 80003f2:	220c      	movs	r2, #12
 80003f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_USART2_UART_Init+0x4c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_USART2_UART_Init+0x4c>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <MX_USART2_UART_Init+0x4c>)
 8000404:	f001 ff7c 	bl	8002300 <HAL_UART_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800040e:	f000 f847 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	200000fc 	.word	0x200000fc
 800041c:	40004400 	.word	0x40004400

08000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	f107 0308 	add.w	r3, r7, #8
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000434:	4b18      	ldr	r3, [pc, #96]	; (8000498 <MX_GPIO_Init+0x78>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a17      	ldr	r2, [pc, #92]	; (8000498 <MX_GPIO_Init+0x78>)
 800043a:	f043 0310 	orr.w	r3, r3, #16
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b15      	ldr	r3, [pc, #84]	; (8000498 <MX_GPIO_Init+0x78>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0310 	and.w	r3, r3, #16
 8000448:	607b      	str	r3, [r7, #4]
 800044a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044c:	4b12      	ldr	r3, [pc, #72]	; (8000498 <MX_GPIO_Init+0x78>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a11      	ldr	r2, [pc, #68]	; (8000498 <MX_GPIO_Init+0x78>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MX_GPIO_Init+0x78>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0304 	and.w	r3, r3, #4
 8000460:	603b      	str	r3, [r7, #0]
 8000462:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046a:	480c      	ldr	r0, [pc, #48]	; (800049c <MX_GPIO_Init+0x7c>)
 800046c:	f000 ffe4 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000474:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000476:	2301      	movs	r3, #1
 8000478:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047e:	2302      	movs	r3, #2
 8000480:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000482:	f107 0308 	add.w	r3, r7, #8
 8000486:	4619      	mov	r1, r3
 8000488:	4804      	ldr	r0, [pc, #16]	; (800049c <MX_GPIO_Init+0x7c>)
 800048a:	f000 fe51 	bl	8001130 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800048e:	bf00      	nop
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000
 800049c:	40011000 	.word	0x40011000

080004a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a4:	b672      	cpsid	i
}
 80004a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80004a8:	e7fe      	b.n	80004a8 <Error_Handler+0x8>
	...

080004ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <HAL_MspInit+0x40>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <HAL_MspInit+0x40>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6193      	str	r3, [r2, #24]
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <HAL_MspInit+0x40>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <HAL_MspInit+0x40>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a07      	ldr	r2, [pc, #28]	; (80004ec <HAL_MspInit+0x40>)
 80004d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <HAL_MspInit+0x40>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	40021000 	.word	0x40021000

080004f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a14      	ldr	r2, [pc, #80]	; (800055c <HAL_ADC_MspInit+0x6c>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d121      	bne.n	8000554 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000510:	4b13      	ldr	r3, [pc, #76]	; (8000560 <HAL_ADC_MspInit+0x70>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a12      	ldr	r2, [pc, #72]	; (8000560 <HAL_ADC_MspInit+0x70>)
 8000516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b10      	ldr	r3, [pc, #64]	; (8000560 <HAL_ADC_MspInit+0x70>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <HAL_ADC_MspInit+0x70>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a0c      	ldr	r2, [pc, #48]	; (8000560 <HAL_ADC_MspInit+0x70>)
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <HAL_ADC_MspInit+0x70>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0304 	and.w	r3, r3, #4
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000540:	2301      	movs	r3, #1
 8000542:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000544:	2303      	movs	r3, #3
 8000546:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	4619      	mov	r1, r3
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <HAL_ADC_MspInit+0x74>)
 8000550:	f000 fdee 	bl	8001130 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000554:	bf00      	nop
 8000556:	3720      	adds	r7, #32
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40012400 	.word	0x40012400
 8000560:	40021000 	.word	0x40021000
 8000564:	40010800 	.word	0x40010800

08000568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000578:	d10b      	bne.n	8000592 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <HAL_TIM_Base_MspInit+0x34>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	4a07      	ldr	r2, [pc, #28]	; (800059c <HAL_TIM_Base_MspInit+0x34>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	61d3      	str	r3, [r2, #28]
 8000586:	4b05      	ldr	r3, [pc, #20]	; (800059c <HAL_TIM_Base_MspInit+0x34>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	40021000 	.word	0x40021000

080005a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a1f      	ldr	r2, [pc, #124]	; (8000638 <HAL_UART_MspInit+0x98>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d137      	bne.n	8000630 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <HAL_UART_MspInit+0x9c>)
 80005c2:	69db      	ldr	r3, [r3, #28]
 80005c4:	4a1d      	ldr	r2, [pc, #116]	; (800063c <HAL_UART_MspInit+0x9c>)
 80005c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ca:	61d3      	str	r3, [r2, #28]
 80005cc:	4b1b      	ldr	r3, [pc, #108]	; (800063c <HAL_UART_MspInit+0x9c>)
 80005ce:	69db      	ldr	r3, [r3, #28]
 80005d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d8:	4b18      	ldr	r3, [pc, #96]	; (800063c <HAL_UART_MspInit+0x9c>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a17      	ldr	r2, [pc, #92]	; (800063c <HAL_UART_MspInit+0x9c>)
 80005de:	f043 0304 	orr.w	r3, r3, #4
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <HAL_UART_MspInit+0x9c>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0304 	and.w	r3, r3, #4
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005f0:	2304      	movs	r3, #4
 80005f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f4:	2302      	movs	r3, #2
 80005f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f8:	2303      	movs	r3, #3
 80005fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	4619      	mov	r1, r3
 8000602:	480f      	ldr	r0, [pc, #60]	; (8000640 <HAL_UART_MspInit+0xa0>)
 8000604:	f000 fd94 	bl	8001130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000608:	2308      	movs	r3, #8
 800060a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	4619      	mov	r1, r3
 800061a:	4809      	ldr	r0, [pc, #36]	; (8000640 <HAL_UART_MspInit+0xa0>)
 800061c:	f000 fd88 	bl	8001130 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2100      	movs	r1, #0
 8000624:	2026      	movs	r0, #38	; 0x26
 8000626:	f000 fc9a 	bl	8000f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800062a:	2026      	movs	r0, #38	; 0x26
 800062c:	f000 fcb3 	bl	8000f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000630:	bf00      	nop
 8000632:	3720      	adds	r7, #32
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40004400 	.word	0x40004400
 800063c:	40021000 	.word	0x40021000
 8000640:	40010800 	.word	0x40010800

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <NMI_Handler+0x4>

0800064a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <HardFault_Handler+0x4>

08000650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <MemManage_Handler+0x4>

08000656 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <BusFault_Handler+0x4>

0800065c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <UsageFault_Handler+0x4>

08000662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr

0800067a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr

08000686 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800068a:	f000 f93f 	bl	800090c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <USART2_IRQHandler+0x10>)
 800069a:	f001 ff29 	bl	80024f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200000fc 	.word	0x200000fc

080006a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return 1;
 80006ac:	2301      	movs	r3, #1
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr

080006b6 <_kill>:

int _kill(int pid, int sig)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80006c0:	f002 fe36 	bl	8003330 <__errno>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2216      	movs	r2, #22
 80006c8:	601a      	str	r2, [r3, #0]
  return -1;
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <_exit>:

void _exit (int status)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80006de:	f04f 31ff 	mov.w	r1, #4294967295
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff ffe7 	bl	80006b6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80006e8:	e7fe      	b.n	80006e8 <_exit+0x12>

080006ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b086      	sub	sp, #24
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	60f8      	str	r0, [r7, #12]
 80006f2:	60b9      	str	r1, [r7, #8]
 80006f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	e00a      	b.n	8000712 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006fc:	f3af 8000 	nop.w
 8000700:	4601      	mov	r1, r0
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	1c5a      	adds	r2, r3, #1
 8000706:	60ba      	str	r2, [r7, #8]
 8000708:	b2ca      	uxtb	r2, r1
 800070a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	3301      	adds	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	697a      	ldr	r2, [r7, #20]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	429a      	cmp	r2, r3
 8000718:	dbf0      	blt.n	80006fc <_read+0x12>
  }

  return len;
 800071a:	687b      	ldr	r3, [r7, #4]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	e009      	b.n	800074a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	1c5a      	adds	r2, r3, #1
 800073a:	60ba      	str	r2, [r7, #8]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	3301      	adds	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	697a      	ldr	r2, [r7, #20]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	429a      	cmp	r2, r3
 8000750:	dbf1      	blt.n	8000736 <_write+0x12>
  }
  return len;
 8000752:	687b      	ldr	r3, [r7, #4]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <_close>:

int _close(int file)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000768:	4618      	mov	r0, r3
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000772:	b480      	push	{r7}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000782:	605a      	str	r2, [r3, #4]
  return 0;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <_isatty>:

int _isatty(int file)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000798:	2301      	movs	r3, #1
}
 800079a:	4618      	mov	r0, r3
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007c4:	4a14      	ldr	r2, [pc, #80]	; (8000818 <_sbrk+0x5c>)
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <_sbrk+0x60>)
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <_sbrk+0x64>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d102      	bne.n	80007de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <_sbrk+0x64>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <_sbrk+0x68>)
 80007dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <_sbrk+0x64>)
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4413      	add	r3, r2
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d207      	bcs.n	80007fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007ec:	f002 fda0 	bl	8003330 <__errno>
 80007f0:	4603      	mov	r3, r0
 80007f2:	220c      	movs	r2, #12
 80007f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	e009      	b.n	8000810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <_sbrk+0x64>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <_sbrk+0x64>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4413      	add	r3, r2
 800080a:	4a05      	ldr	r2, [pc, #20]	; (8000820 <_sbrk+0x64>)
 800080c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800080e:	68fb      	ldr	r3, [r7, #12]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20005000 	.word	0x20005000
 800081c:	00000400 	.word	0x00000400
 8000820:	20000148 	.word	0x20000148
 8000824:	200002a0 	.word	0x200002a0

08000828 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000834:	f7ff fff8 	bl	8000828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000838:	480b      	ldr	r0, [pc, #44]	; (8000868 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800083a:	490c      	ldr	r1, [pc, #48]	; (800086c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800083c:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <LoopFillZerobss+0x16>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000840:	e002      	b.n	8000848 <LoopCopyDataInit>

08000842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000846:	3304      	adds	r3, #4

08000848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800084c:	d3f9      	bcc.n	8000842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084e:	4a09      	ldr	r2, [pc, #36]	; (8000874 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000850:	4c09      	ldr	r4, [pc, #36]	; (8000878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000854:	e001      	b.n	800085a <LoopFillZerobss>

08000856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000858:	3204      	adds	r2, #4

0800085a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800085c:	d3fb      	bcc.n	8000856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800085e:	f002 fd6d 	bl	800333c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000862:	f7ff fc91 	bl	8000188 <main>
  bx lr
 8000866:	4770      	bx	lr
  ldr r0, =_sdata
 8000868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800086c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000870:	08004484 	.word	0x08004484
  ldr r2, =_sbss
 8000874:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000878:	2000029c 	.word	0x2000029c

0800087c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800087c:	e7fe      	b.n	800087c <ADC1_2_IRQHandler>
	...

08000880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_Init+0x28>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <HAL_Init+0x28>)
 800088a:	f043 0310 	orr.w	r3, r3, #16
 800088e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000890:	2003      	movs	r0, #3
 8000892:	f000 fb59 	bl	8000f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000896:	200f      	movs	r0, #15
 8000898:	f000 f808 	bl	80008ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800089c:	f7ff fe06 	bl	80004ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40022000 	.word	0x40022000

080008ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_InitTick+0x54>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_InitTick+0x58>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fb71 	bl	8000fb2 <HAL_SYSTICK_Config>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00e      	b.n	80008f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d80a      	bhi.n	80008f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f000 fb39 	bl	8000f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ec:	4a06      	ldr	r2, [pc, #24]	; (8000908 <HAL_InitTick+0x5c>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e000      	b.n	80008f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000000 	.word	0x20000000
 8000904:	20000008 	.word	0x20000008
 8000908:	20000004 	.word	0x20000004

0800090c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_IncTick+0x1c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <HAL_IncTick+0x20>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a03      	ldr	r2, [pc, #12]	; (800092c <HAL_IncTick+0x20>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	20000008 	.word	0x20000008
 800092c:	2000014c 	.word	0x2000014c

08000930 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;
 8000934:	4b02      	ldr	r3, [pc, #8]	; (8000940 <HAL_GetTick+0x10>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	2000014c 	.word	0x2000014c

08000944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800094c:	f7ff fff0 	bl	8000930 <HAL_GetTick>
 8000950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800095c:	d005      	beq.n	800096a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <HAL_Delay+0x44>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4413      	add	r3, r2
 8000968:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800096a:	bf00      	nop
 800096c:	f7ff ffe0 	bl	8000930 <HAL_GetTick>
 8000970:	4602      	mov	r2, r0
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	429a      	cmp	r2, r3
 800097a:	d8f7      	bhi.n	800096c <HAL_Delay+0x28>
  {
  }
}
 800097c:	bf00      	nop
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000008 	.word	0x20000008

0800098c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d101      	bne.n	80009ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	e0be      	b.n	8000b2c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d109      	bne.n	80009d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff fd90 	bl	80004f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f000 f9ab 	bl	8000d2c <ADC_ConversionStop_Disable>
 80009d6:	4603      	mov	r3, r0
 80009d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009de:	f003 0310 	and.w	r3, r3, #16
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	f040 8099 	bne.w	8000b1a <HAL_ADC_Init+0x18e>
 80009e8:	7dfb      	ldrb	r3, [r7, #23]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f040 8095 	bne.w	8000b1a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009f8:	f023 0302 	bic.w	r3, r3, #2
 80009fc:	f043 0202 	orr.w	r2, r3, #2
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a0c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	7b1b      	ldrb	r3, [r3, #12]
 8000a12:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a14:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a24:	d003      	beq.n	8000a2e <HAL_ADC_Init+0xa2>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d102      	bne.n	8000a34 <HAL_ADC_Init+0xa8>
 8000a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a32:	e000      	b.n	8000a36 <HAL_ADC_Init+0xaa>
 8000a34:	2300      	movs	r3, #0
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	7d1b      	ldrb	r3, [r3, #20]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d119      	bne.n	8000a78 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	7b1b      	ldrb	r3, [r3, #12]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d109      	bne.n	8000a60 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	035a      	lsls	r2, r3, #13
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	e00b      	b.n	8000a78 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a64:	f043 0220 	orr.w	r2, r3, #32
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a70:	f043 0201 	orr.w	r2, r3, #1
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <HAL_ADC_Init+0x1a8>)
 8000a94:	4013      	ands	r3, r2
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	6812      	ldr	r2, [r2, #0]
 8000a9a:	68b9      	ldr	r1, [r7, #8]
 8000a9c:	430b      	orrs	r3, r1
 8000a9e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000aa8:	d003      	beq.n	8000ab2 <HAL_ADC_Init+0x126>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d104      	bne.n	8000abc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	691b      	ldr	r3, [r3, #16]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	051b      	lsls	r3, r3, #20
 8000aba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	430a      	orrs	r2, r1
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	689a      	ldr	r2, [r3, #8]
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <HAL_ADC_Init+0x1ac>)
 8000ad8:	4013      	ands	r3, r2
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d10b      	bne.n	8000af8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aea:	f023 0303 	bic.w	r3, r3, #3
 8000aee:	f043 0201 	orr.w	r2, r3, #1
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000af6:	e018      	b.n	8000b2a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000afc:	f023 0312 	bic.w	r3, r3, #18
 8000b00:	f043 0210 	orr.w	r2, r3, #16
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0c:	f043 0201 	orr.w	r2, r3, #1
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b18:	e007      	b.n	8000b2a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1e:	f043 0210 	orr.w	r2, r3, #16
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	ffe1f7fd 	.word	0xffe1f7fd
 8000b38:	ff1f0efe 	.word	0xff1f0efe

08000b3c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d101      	bne.n	8000b5c <HAL_ADC_ConfigChannel+0x20>
 8000b58:	2302      	movs	r3, #2
 8000b5a:	e0dc      	b.n	8000d16 <HAL_ADC_ConfigChannel+0x1da>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	2b06      	cmp	r3, #6
 8000b6a:	d81c      	bhi.n	8000ba6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	4613      	mov	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	3b05      	subs	r3, #5
 8000b7e:	221f      	movs	r2, #31
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4019      	ands	r1, r3
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	4613      	mov	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	3b05      	subs	r3, #5
 8000b98:	fa00 f203 	lsl.w	r2, r0, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	635a      	str	r2, [r3, #52]	; 0x34
 8000ba4:	e03c      	b.n	8000c20 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2b0c      	cmp	r3, #12
 8000bac:	d81c      	bhi.n	8000be8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	3b23      	subs	r3, #35	; 0x23
 8000bc0:	221f      	movs	r2, #31
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	4019      	ands	r1, r3
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	6818      	ldr	r0, [r3, #0]
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	3b23      	subs	r3, #35	; 0x23
 8000bda:	fa00 f203 	lsl.w	r2, r0, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	430a      	orrs	r2, r1
 8000be4:	631a      	str	r2, [r3, #48]	; 0x30
 8000be6:	e01b      	b.n	8000c20 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	3b41      	subs	r3, #65	; 0x41
 8000bfa:	221f      	movs	r2, #31
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	4019      	ands	r1, r3
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	4413      	add	r3, r2
 8000c12:	3b41      	subs	r3, #65	; 0x41
 8000c14:	fa00 f203 	lsl.w	r2, r0, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b09      	cmp	r3, #9
 8000c26:	d91c      	bls.n	8000c62 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	68d9      	ldr	r1, [r3, #12]
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4613      	mov	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	4413      	add	r3, r2
 8000c38:	3b1e      	subs	r3, #30
 8000c3a:	2207      	movs	r2, #7
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	4019      	ands	r1, r3
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	6898      	ldr	r0, [r3, #8]
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	3b1e      	subs	r3, #30
 8000c54:	fa00 f203 	lsl.w	r2, r0, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	e019      	b.n	8000c96 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	6919      	ldr	r1, [r3, #16]
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	4413      	add	r3, r2
 8000c72:	2207      	movs	r2, #7
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	4019      	ands	r1, r3
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	6898      	ldr	r0, [r3, #8]
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4613      	mov	r3, r2
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	4413      	add	r3, r2
 8000c8a:	fa00 f203 	lsl.w	r2, r0, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	430a      	orrs	r2, r1
 8000c94:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b10      	cmp	r3, #16
 8000c9c:	d003      	beq.n	8000ca6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ca2:	2b11      	cmp	r3, #17
 8000ca4:	d132      	bne.n	8000d0c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a1d      	ldr	r2, [pc, #116]	; (8000d20 <HAL_ADC_ConfigChannel+0x1e4>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d125      	bne.n	8000cfc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d126      	bne.n	8000d0c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ccc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b10      	cmp	r3, #16
 8000cd4:	d11a      	bne.n	8000d0c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <HAL_ADC_ConfigChannel+0x1e8>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <HAL_ADC_ConfigChannel+0x1ec>)
 8000cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce0:	0c9a      	lsrs	r2, r3, #18
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	4413      	add	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cec:	e002      	b.n	8000cf4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1f9      	bne.n	8000cee <HAL_ADC_ConfigChannel+0x1b2>
 8000cfa:	e007      	b.n	8000d0c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d00:	f043 0220 	orr.w	r2, r3, #32
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	40012400 	.word	0x40012400
 8000d24:	20000000 	.word	0x20000000
 8000d28:	431bde83 	.word	0x431bde83

08000d2c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d12e      	bne.n	8000da4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f022 0201 	bic.w	r2, r2, #1
 8000d54:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d56:	f7ff fdeb 	bl	8000930 <HAL_GetTick>
 8000d5a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d5c:	e01b      	b.n	8000d96 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d5e:	f7ff fde7 	bl	8000930 <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d914      	bls.n	8000d96 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d10d      	bne.n	8000d96 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7e:	f043 0210 	orr.w	r2, r3, #16
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8a:	f043 0201 	orr.w	r2, r3, #1
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e007      	b.n	8000da6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d0dc      	beq.n	8000d5e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de2:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	60d3      	str	r3, [r2, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <__NVIC_GetPriorityGrouping+0x18>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	0a1b      	lsrs	r3, r3, #8
 8000e02:	f003 0307 	and.w	r3, r3, #7
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	db0b      	blt.n	8000e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	f003 021f 	and.w	r2, r3, #31
 8000e2c:	4906      	ldr	r1, [pc, #24]	; (8000e48 <__NVIC_EnableIRQ+0x34>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	095b      	lsrs	r3, r3, #5
 8000e34:	2001      	movs	r0, #1
 8000e36:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	; (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	; (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	; 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f14:	d301      	bcc.n	8000f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00f      	b.n	8000f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <SysTick_Config+0x40>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f22:	210f      	movs	r1, #15
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f7ff ff90 	bl	8000e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SysTick_Config+0x40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <SysTick_Config+0x40>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff2d 	bl	8000db0 <__NVIC_SetPriorityGrouping>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f70:	f7ff ff42 	bl	8000df8 <__NVIC_GetPriorityGrouping>
 8000f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	68b9      	ldr	r1, [r7, #8]
 8000f7a:	6978      	ldr	r0, [r7, #20]
 8000f7c:	f7ff ff90 	bl	8000ea0 <NVIC_EncodePriority>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff5f 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff35 	bl	8000e14 <__NVIC_EnableIRQ>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffa2 	bl	8000f04 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b085      	sub	sp, #20
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d008      	beq.n	8000ff4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e020      	b.n	8001036 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 020e 	bic.w	r2, r2, #14
 8001002:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0201 	bic.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101c:	2101      	movs	r1, #1
 800101e:	fa01 f202 	lsl.w	r2, r1, r2
 8001022:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001034:	7bfb      	ldrb	r3, [r7, #15]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d005      	beq.n	8001064 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2204      	movs	r2, #4
 800105c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e051      	b.n	8001108 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 020e 	bic.w	r2, r2, #14
 8001072:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0201 	bic.w	r2, r2, #1
 8001082:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a22      	ldr	r2, [pc, #136]	; (8001114 <HAL_DMA_Abort_IT+0xd4>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d029      	beq.n	80010e2 <HAL_DMA_Abort_IT+0xa2>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a21      	ldr	r2, [pc, #132]	; (8001118 <HAL_DMA_Abort_IT+0xd8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d022      	beq.n	80010de <HAL_DMA_Abort_IT+0x9e>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a1f      	ldr	r2, [pc, #124]	; (800111c <HAL_DMA_Abort_IT+0xdc>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d01a      	beq.n	80010d8 <HAL_DMA_Abort_IT+0x98>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a1e      	ldr	r2, [pc, #120]	; (8001120 <HAL_DMA_Abort_IT+0xe0>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d012      	beq.n	80010d2 <HAL_DMA_Abort_IT+0x92>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <HAL_DMA_Abort_IT+0xe4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00a      	beq.n	80010cc <HAL_DMA_Abort_IT+0x8c>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <HAL_DMA_Abort_IT+0xe8>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d102      	bne.n	80010c6 <HAL_DMA_Abort_IT+0x86>
 80010c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010c4:	e00e      	b.n	80010e4 <HAL_DMA_Abort_IT+0xa4>
 80010c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010ca:	e00b      	b.n	80010e4 <HAL_DMA_Abort_IT+0xa4>
 80010cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d0:	e008      	b.n	80010e4 <HAL_DMA_Abort_IT+0xa4>
 80010d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d6:	e005      	b.n	80010e4 <HAL_DMA_Abort_IT+0xa4>
 80010d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010dc:	e002      	b.n	80010e4 <HAL_DMA_Abort_IT+0xa4>
 80010de:	2310      	movs	r3, #16
 80010e0:	e000      	b.n	80010e4 <HAL_DMA_Abort_IT+0xa4>
 80010e2:	2301      	movs	r3, #1
 80010e4:	4a11      	ldr	r2, [pc, #68]	; (800112c <HAL_DMA_Abort_IT+0xec>)
 80010e6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	4798      	blx	r3
    } 
  }
  return status;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40020008 	.word	0x40020008
 8001118:	4002001c 	.word	0x4002001c
 800111c:	40020030 	.word	0x40020030
 8001120:	40020044 	.word	0x40020044
 8001124:	40020058 	.word	0x40020058
 8001128:	4002006c 	.word	0x4002006c
 800112c:	40020000 	.word	0x40020000

08001130 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001130:	b480      	push	{r7}
 8001132:	b08b      	sub	sp, #44	; 0x2c
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001142:	e169      	b.n	8001418 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001144:	2201      	movs	r2, #1
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	69fa      	ldr	r2, [r7, #28]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	429a      	cmp	r2, r3
 800115e:	f040 8158 	bne.w	8001412 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4a9a      	ldr	r2, [pc, #616]	; (80013d0 <HAL_GPIO_Init+0x2a0>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d05e      	beq.n	800122a <HAL_GPIO_Init+0xfa>
 800116c:	4a98      	ldr	r2, [pc, #608]	; (80013d0 <HAL_GPIO_Init+0x2a0>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d875      	bhi.n	800125e <HAL_GPIO_Init+0x12e>
 8001172:	4a98      	ldr	r2, [pc, #608]	; (80013d4 <HAL_GPIO_Init+0x2a4>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d058      	beq.n	800122a <HAL_GPIO_Init+0xfa>
 8001178:	4a96      	ldr	r2, [pc, #600]	; (80013d4 <HAL_GPIO_Init+0x2a4>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d86f      	bhi.n	800125e <HAL_GPIO_Init+0x12e>
 800117e:	4a96      	ldr	r2, [pc, #600]	; (80013d8 <HAL_GPIO_Init+0x2a8>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d052      	beq.n	800122a <HAL_GPIO_Init+0xfa>
 8001184:	4a94      	ldr	r2, [pc, #592]	; (80013d8 <HAL_GPIO_Init+0x2a8>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d869      	bhi.n	800125e <HAL_GPIO_Init+0x12e>
 800118a:	4a94      	ldr	r2, [pc, #592]	; (80013dc <HAL_GPIO_Init+0x2ac>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d04c      	beq.n	800122a <HAL_GPIO_Init+0xfa>
 8001190:	4a92      	ldr	r2, [pc, #584]	; (80013dc <HAL_GPIO_Init+0x2ac>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d863      	bhi.n	800125e <HAL_GPIO_Init+0x12e>
 8001196:	4a92      	ldr	r2, [pc, #584]	; (80013e0 <HAL_GPIO_Init+0x2b0>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d046      	beq.n	800122a <HAL_GPIO_Init+0xfa>
 800119c:	4a90      	ldr	r2, [pc, #576]	; (80013e0 <HAL_GPIO_Init+0x2b0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d85d      	bhi.n	800125e <HAL_GPIO_Init+0x12e>
 80011a2:	2b12      	cmp	r3, #18
 80011a4:	d82a      	bhi.n	80011fc <HAL_GPIO_Init+0xcc>
 80011a6:	2b12      	cmp	r3, #18
 80011a8:	d859      	bhi.n	800125e <HAL_GPIO_Init+0x12e>
 80011aa:	a201      	add	r2, pc, #4	; (adr r2, 80011b0 <HAL_GPIO_Init+0x80>)
 80011ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b0:	0800122b 	.word	0x0800122b
 80011b4:	08001205 	.word	0x08001205
 80011b8:	08001217 	.word	0x08001217
 80011bc:	08001259 	.word	0x08001259
 80011c0:	0800125f 	.word	0x0800125f
 80011c4:	0800125f 	.word	0x0800125f
 80011c8:	0800125f 	.word	0x0800125f
 80011cc:	0800125f 	.word	0x0800125f
 80011d0:	0800125f 	.word	0x0800125f
 80011d4:	0800125f 	.word	0x0800125f
 80011d8:	0800125f 	.word	0x0800125f
 80011dc:	0800125f 	.word	0x0800125f
 80011e0:	0800125f 	.word	0x0800125f
 80011e4:	0800125f 	.word	0x0800125f
 80011e8:	0800125f 	.word	0x0800125f
 80011ec:	0800125f 	.word	0x0800125f
 80011f0:	0800125f 	.word	0x0800125f
 80011f4:	0800120d 	.word	0x0800120d
 80011f8:	08001221 	.word	0x08001221
 80011fc:	4a79      	ldr	r2, [pc, #484]	; (80013e4 <HAL_GPIO_Init+0x2b4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d013      	beq.n	800122a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001202:	e02c      	b.n	800125e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	623b      	str	r3, [r7, #32]
          break;
 800120a:	e029      	b.n	8001260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	3304      	adds	r3, #4
 8001212:	623b      	str	r3, [r7, #32]
          break;
 8001214:	e024      	b.n	8001260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	3308      	adds	r3, #8
 800121c:	623b      	str	r3, [r7, #32]
          break;
 800121e:	e01f      	b.n	8001260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	330c      	adds	r3, #12
 8001226:	623b      	str	r3, [r7, #32]
          break;
 8001228:	e01a      	b.n	8001260 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001232:	2304      	movs	r3, #4
 8001234:	623b      	str	r3, [r7, #32]
          break;
 8001236:	e013      	b.n	8001260 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d105      	bne.n	800124c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001240:	2308      	movs	r3, #8
 8001242:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	611a      	str	r2, [r3, #16]
          break;
 800124a:	e009      	b.n	8001260 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800124c:	2308      	movs	r3, #8
 800124e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69fa      	ldr	r2, [r7, #28]
 8001254:	615a      	str	r2, [r3, #20]
          break;
 8001256:	e003      	b.n	8001260 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
          break;
 800125c:	e000      	b.n	8001260 <HAL_GPIO_Init+0x130>
          break;
 800125e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	2bff      	cmp	r3, #255	; 0xff
 8001264:	d801      	bhi.n	800126a <HAL_GPIO_Init+0x13a>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	e001      	b.n	800126e <HAL_GPIO_Init+0x13e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3304      	adds	r3, #4
 800126e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2bff      	cmp	r3, #255	; 0xff
 8001274:	d802      	bhi.n	800127c <HAL_GPIO_Init+0x14c>
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	e002      	b.n	8001282 <HAL_GPIO_Init+0x152>
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	3b08      	subs	r3, #8
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	210f      	movs	r1, #15
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	401a      	ands	r2, r3
 8001294:	6a39      	ldr	r1, [r7, #32]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	431a      	orrs	r2, r3
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 80b1 	beq.w	8001412 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012b0:	4b4d      	ldr	r3, [pc, #308]	; (80013e8 <HAL_GPIO_Init+0x2b8>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a4c      	ldr	r2, [pc, #304]	; (80013e8 <HAL_GPIO_Init+0x2b8>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b4a      	ldr	r3, [pc, #296]	; (80013e8 <HAL_GPIO_Init+0x2b8>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012c8:	4a48      	ldr	r2, [pc, #288]	; (80013ec <HAL_GPIO_Init+0x2bc>)
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3302      	adds	r3, #2
 80012d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	220f      	movs	r2, #15
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	4013      	ands	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a40      	ldr	r2, [pc, #256]	; (80013f0 <HAL_GPIO_Init+0x2c0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d013      	beq.n	800131c <HAL_GPIO_Init+0x1ec>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a3f      	ldr	r2, [pc, #252]	; (80013f4 <HAL_GPIO_Init+0x2c4>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d00d      	beq.n	8001318 <HAL_GPIO_Init+0x1e8>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a3e      	ldr	r2, [pc, #248]	; (80013f8 <HAL_GPIO_Init+0x2c8>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d007      	beq.n	8001314 <HAL_GPIO_Init+0x1e4>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a3d      	ldr	r2, [pc, #244]	; (80013fc <HAL_GPIO_Init+0x2cc>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d101      	bne.n	8001310 <HAL_GPIO_Init+0x1e0>
 800130c:	2303      	movs	r3, #3
 800130e:	e006      	b.n	800131e <HAL_GPIO_Init+0x1ee>
 8001310:	2304      	movs	r3, #4
 8001312:	e004      	b.n	800131e <HAL_GPIO_Init+0x1ee>
 8001314:	2302      	movs	r3, #2
 8001316:	e002      	b.n	800131e <HAL_GPIO_Init+0x1ee>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <HAL_GPIO_Init+0x1ee>
 800131c:	2300      	movs	r3, #0
 800131e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001320:	f002 0203 	and.w	r2, r2, #3
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	4093      	lsls	r3, r2
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800132e:	492f      	ldr	r1, [pc, #188]	; (80013ec <HAL_GPIO_Init+0x2bc>)
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d006      	beq.n	8001356 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001348:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	492c      	ldr	r1, [pc, #176]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	608b      	str	r3, [r1, #8]
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001356:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	43db      	mvns	r3, r3
 800135e:	4928      	ldr	r1, [pc, #160]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 8001360:	4013      	ands	r3, r2
 8001362:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d006      	beq.n	800137e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001370:	4b23      	ldr	r3, [pc, #140]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	4922      	ldr	r1, [pc, #136]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	60cb      	str	r3, [r1, #12]
 800137c:	e006      	b.n	800138c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	43db      	mvns	r3, r3
 8001386:	491e      	ldr	r1, [pc, #120]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 8001388:	4013      	ands	r3, r2
 800138a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	4918      	ldr	r1, [pc, #96]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	4914      	ldr	r1, [pc, #80]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d021      	beq.n	8001404 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	490e      	ldr	r1, [pc, #56]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]
 80013cc:	e021      	b.n	8001412 <HAL_GPIO_Init+0x2e2>
 80013ce:	bf00      	nop
 80013d0:	10320000 	.word	0x10320000
 80013d4:	10310000 	.word	0x10310000
 80013d8:	10220000 	.word	0x10220000
 80013dc:	10210000 	.word	0x10210000
 80013e0:	10120000 	.word	0x10120000
 80013e4:	10110000 	.word	0x10110000
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010000 	.word	0x40010000
 80013f0:	40010800 	.word	0x40010800
 80013f4:	40010c00 	.word	0x40010c00
 80013f8:	40011000 	.word	0x40011000
 80013fc:	40011400 	.word	0x40011400
 8001400:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_GPIO_Init+0x304>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	43db      	mvns	r3, r3
 800140c:	4909      	ldr	r1, [pc, #36]	; (8001434 <HAL_GPIO_Init+0x304>)
 800140e:	4013      	ands	r3, r2
 8001410:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	3301      	adds	r3, #1
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	fa22 f303 	lsr.w	r3, r2, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	f47f ae8e 	bne.w	8001144 <HAL_GPIO_Init+0x14>
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	372c      	adds	r7, #44	; 0x2c
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	40010400 	.word	0x40010400

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001454:	e003      	b.n	800145e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	041a      	lsls	r2, r3, #16
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	611a      	str	r2, [r3, #16]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4013      	ands	r3, r2
 8001480:	041a      	lsls	r2, r3, #16
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	43d9      	mvns	r1, r3
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	400b      	ands	r3, r1
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	611a      	str	r2, [r3, #16]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
	...

0800149c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e272      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 8087 	beq.w	80015ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014bc:	4b92      	ldr	r3, [pc, #584]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 030c 	and.w	r3, r3, #12
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d00c      	beq.n	80014e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014c8:	4b8f      	ldr	r3, [pc, #572]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d112      	bne.n	80014fa <HAL_RCC_OscConfig+0x5e>
 80014d4:	4b8c      	ldr	r3, [pc, #560]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e0:	d10b      	bne.n	80014fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e2:	4b89      	ldr	r3, [pc, #548]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d06c      	beq.n	80015c8 <HAL_RCC_OscConfig+0x12c>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d168      	bne.n	80015c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e24c      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001502:	d106      	bne.n	8001512 <HAL_RCC_OscConfig+0x76>
 8001504:	4b80      	ldr	r3, [pc, #512]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a7f      	ldr	r2, [pc, #508]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800150a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	e02e      	b.n	8001570 <HAL_RCC_OscConfig+0xd4>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10c      	bne.n	8001534 <HAL_RCC_OscConfig+0x98>
 800151a:	4b7b      	ldr	r3, [pc, #492]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a7a      	ldr	r2, [pc, #488]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b78      	ldr	r3, [pc, #480]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a77      	ldr	r2, [pc, #476]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800152c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e01d      	b.n	8001570 <HAL_RCC_OscConfig+0xd4>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0xbc>
 800153e:	4b72      	ldr	r3, [pc, #456]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a71      	ldr	r2, [pc, #452]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b6f      	ldr	r3, [pc, #444]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a6e      	ldr	r2, [pc, #440]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e00b      	b.n	8001570 <HAL_RCC_OscConfig+0xd4>
 8001558:	4b6b      	ldr	r3, [pc, #428]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a6a      	ldr	r2, [pc, #424]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800155e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b68      	ldr	r3, [pc, #416]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a67      	ldr	r2, [pc, #412]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800156a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d013      	beq.n	80015a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff f9da 	bl	8000930 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001580:	f7ff f9d6 	bl	8000930 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	; 0x64
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e200      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	4b5d      	ldr	r3, [pc, #372]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0xe4>
 800159e:	e014      	b.n	80015ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff f9c6 	bl	8000930 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff f9c2 	bl	8000930 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b64      	cmp	r3, #100	; 0x64
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1ec      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	4b53      	ldr	r3, [pc, #332]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x10c>
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d063      	beq.n	800169e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015d6:	4b4c      	ldr	r3, [pc, #304]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00b      	beq.n	80015fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015e2:	4b49      	ldr	r3, [pc, #292]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d11c      	bne.n	8001628 <HAL_RCC_OscConfig+0x18c>
 80015ee:	4b46      	ldr	r3, [pc, #280]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d116      	bne.n	8001628 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fa:	4b43      	ldr	r3, [pc, #268]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <HAL_RCC_OscConfig+0x176>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d001      	beq.n	8001612 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e1c0      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4939      	ldr	r1, [pc, #228]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001626:	e03a      	b.n	800169e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d020      	beq.n	8001672 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7ff f97b 	bl	8000930 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff f977 	bl	8000930 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e1a1      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001650:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165c:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4927      	ldr	r1, [pc, #156]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
 8001670:	e015      	b.n	800169e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001672:	4b26      	ldr	r3, [pc, #152]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff f95a 	bl	8000930 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001680:	f7ff f956 	bl	8000930 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e180      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d03a      	beq.n	8001720 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d019      	beq.n	80016e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HAL_RCC_OscConfig+0x274>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff f93a 	bl	8000930 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff f936 	bl	8000930 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e160      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016de:	2001      	movs	r0, #1
 80016e0:	f000 face 	bl	8001c80 <RCC_Delay>
 80016e4:	e01c      	b.n	8001720 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_RCC_OscConfig+0x274>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ec:	f7ff f920 	bl	8000930 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f2:	e00f      	b.n	8001714 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f4:	f7ff f91c 	bl	8000930 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d908      	bls.n	8001714 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e146      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000
 800170c:	42420000 	.word	0x42420000
 8001710:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001714:	4b92      	ldr	r3, [pc, #584]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1e9      	bne.n	80016f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80a6 	beq.w	800187a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001732:	4b8b      	ldr	r3, [pc, #556]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10d      	bne.n	800175a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	4b88      	ldr	r3, [pc, #544]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a87      	ldr	r2, [pc, #540]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001748:	61d3      	str	r3, [r2, #28]
 800174a:	4b85      	ldr	r3, [pc, #532]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001756:	2301      	movs	r3, #1
 8001758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175a:	4b82      	ldr	r3, [pc, #520]	; (8001964 <HAL_RCC_OscConfig+0x4c8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001762:	2b00      	cmp	r3, #0
 8001764:	d118      	bne.n	8001798 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001766:	4b7f      	ldr	r3, [pc, #508]	; (8001964 <HAL_RCC_OscConfig+0x4c8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a7e      	ldr	r2, [pc, #504]	; (8001964 <HAL_RCC_OscConfig+0x4c8>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001772:	f7ff f8dd 	bl	8000930 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177a:	f7ff f8d9 	bl	8000930 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b64      	cmp	r3, #100	; 0x64
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e103      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178c:	4b75      	ldr	r3, [pc, #468]	; (8001964 <HAL_RCC_OscConfig+0x4c8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d106      	bne.n	80017ae <HAL_RCC_OscConfig+0x312>
 80017a0:	4b6f      	ldr	r3, [pc, #444]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4a6e      	ldr	r2, [pc, #440]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6213      	str	r3, [r2, #32]
 80017ac:	e02d      	b.n	800180a <HAL_RCC_OscConfig+0x36e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x334>
 80017b6:	4b6a      	ldr	r3, [pc, #424]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4a69      	ldr	r2, [pc, #420]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	6213      	str	r3, [r2, #32]
 80017c2:	4b67      	ldr	r3, [pc, #412]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	4a66      	ldr	r2, [pc, #408]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	f023 0304 	bic.w	r3, r3, #4
 80017cc:	6213      	str	r3, [r2, #32]
 80017ce:	e01c      	b.n	800180a <HAL_RCC_OscConfig+0x36e>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b05      	cmp	r3, #5
 80017d6:	d10c      	bne.n	80017f2 <HAL_RCC_OscConfig+0x356>
 80017d8:	4b61      	ldr	r3, [pc, #388]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a60      	ldr	r2, [pc, #384]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	6213      	str	r3, [r2, #32]
 80017e4:	4b5e      	ldr	r3, [pc, #376]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4a5d      	ldr	r2, [pc, #372]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6213      	str	r3, [r2, #32]
 80017f0:	e00b      	b.n	800180a <HAL_RCC_OscConfig+0x36e>
 80017f2:	4b5b      	ldr	r3, [pc, #364]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4a5a      	ldr	r2, [pc, #360]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	6213      	str	r3, [r2, #32]
 80017fe:	4b58      	ldr	r3, [pc, #352]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4a57      	ldr	r2, [pc, #348]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	f023 0304 	bic.w	r3, r3, #4
 8001808:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d015      	beq.n	800183e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7ff f88d 	bl	8000930 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001818:	e00a      	b.n	8001830 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181a:	f7ff f889 	bl	8000930 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	f241 3288 	movw	r2, #5000	; 0x1388
 8001828:	4293      	cmp	r3, r2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e0b1      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001830:	4b4b      	ldr	r3, [pc, #300]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0ee      	beq.n	800181a <HAL_RCC_OscConfig+0x37e>
 800183c:	e014      	b.n	8001868 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183e:	f7ff f877 	bl	8000930 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001844:	e00a      	b.n	800185c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f7ff f873 	bl	8000930 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f241 3288 	movw	r2, #5000	; 0x1388
 8001854:	4293      	cmp	r3, r2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e09b      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185c:	4b40      	ldr	r3, [pc, #256]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1ee      	bne.n	8001846 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001868:	7dfb      	ldrb	r3, [r7, #23]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d105      	bne.n	800187a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800186e:	4b3c      	ldr	r3, [pc, #240]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a3b      	ldr	r2, [pc, #236]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001878:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8087 	beq.w	8001992 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001884:	4b36      	ldr	r3, [pc, #216]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b08      	cmp	r3, #8
 800188e:	d061      	beq.n	8001954 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d146      	bne.n	8001926 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001898:	4b33      	ldr	r3, [pc, #204]	; (8001968 <HAL_RCC_OscConfig+0x4cc>)
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff f847 	bl	8000930 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a6:	f7ff f843 	bl	8000930 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e06d      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b8:	4b29      	ldr	r3, [pc, #164]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f0      	bne.n	80018a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018cc:	d108      	bne.n	80018e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018ce:	4b24      	ldr	r3, [pc, #144]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	4921      	ldr	r1, [pc, #132]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e0:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a19      	ldr	r1, [r3, #32]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	430b      	orrs	r3, r1
 80018f2:	491b      	ldr	r1, [pc, #108]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <HAL_RCC_OscConfig+0x4cc>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff f817 	bl	8000930 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001906:	f7ff f813 	bl	8000930 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e03d      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x46a>
 8001924:	e035      	b.n	8001992 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <HAL_RCC_OscConfig+0x4cc>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff f800 	bl	8000930 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001934:	f7fe fffc 	bl	8000930 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e026      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x498>
 8001952:	e01e      	b.n	8001992 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d107      	bne.n	800196c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e019      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
 8001960:	40021000 	.word	0x40021000
 8001964:	40007000 	.word	0x40007000
 8001968:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_RCC_OscConfig+0x500>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	429a      	cmp	r2, r3
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d001      	beq.n	8001992 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000

080019a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0d0      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b4:	4b6a      	ldr	r3, [pc, #424]	; (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d910      	bls.n	80019e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	4b67      	ldr	r3, [pc, #412]	; (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f023 0207 	bic.w	r2, r3, #7
 80019ca:	4965      	ldr	r1, [pc, #404]	; (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	4b63      	ldr	r3, [pc, #396]	; (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0b8      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d020      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019fc:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4a58      	ldr	r2, [pc, #352]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a14:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	4a52      	ldr	r2, [pc, #328]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a20:	4b50      	ldr	r3, [pc, #320]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	494d      	ldr	r1, [pc, #308]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d040      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d115      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e07f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5e:	4b41      	ldr	r3, [pc, #260]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e073      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6e:	4b3d      	ldr	r3, [pc, #244]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e06b      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a7e:	4b39      	ldr	r3, [pc, #228]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f023 0203 	bic.w	r2, r3, #3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4936      	ldr	r1, [pc, #216]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a90:	f7fe ff4e 	bl	8000930 <HAL_GetTick>
 8001a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a96:	e00a      	b.n	8001aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a98:	f7fe ff4a 	bl	8000930 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e053      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 020c 	and.w	r2, r3, #12
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d1eb      	bne.n	8001a98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d210      	bcs.n	8001af0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b24      	ldr	r3, [pc, #144]	; (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 0207 	bic.w	r2, r3, #7
 8001ad6:	4922      	ldr	r1, [pc, #136]	; (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e032      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d008      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4916      	ldr	r1, [pc, #88]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d009      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	490e      	ldr	r1, [pc, #56]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b2e:	f000 f821 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8001b32:	4602      	mov	r2, r0
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	490a      	ldr	r1, [pc, #40]	; (8001b68 <HAL_RCC_ClockConfig+0x1c8>)
 8001b40:	5ccb      	ldrb	r3, [r1, r3]
 8001b42:	fa22 f303 	lsr.w	r3, r2, r3
 8001b46:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1cc>)
 8001b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_RCC_ClockConfig+0x1d0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe feac 	bl	80008ac <HAL_InitTick>

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40022000 	.word	0x40022000
 8001b64:	40021000 	.word	0x40021000
 8001b68:	08004374 	.word	0x08004374
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000004 	.word	0x20000004

08001b74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b8e:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d002      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x30>
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d003      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x36>
 8001ba2:	e027      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ba6:	613b      	str	r3, [r7, #16]
      break;
 8001ba8:	e027      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	0c9b      	lsrs	r3, r3, #18
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bb4:	5cd3      	ldrb	r3, [r2, r3]
 8001bb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d010      	beq.n	8001be4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	0c5b      	lsrs	r3, r3, #17
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	4a11      	ldr	r2, [pc, #68]	; (8001c14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8001bd6:	fb03 f202 	mul.w	r2, r3, r2
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e004      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001be8:	fb02 f303 	mul.w	r3, r2, r3
 8001bec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	613b      	str	r3, [r7, #16]
      break;
 8001bf2:	e002      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8001bf6:	613b      	str	r3, [r7, #16]
      break;
 8001bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bfa:	693b      	ldr	r3, [r7, #16]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	371c      	adds	r7, #28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	007a1200 	.word	0x007a1200
 8001c10:	0800438c 	.word	0x0800438c
 8001c14:	0800439c 	.word	0x0800439c
 8001c18:	003d0900 	.word	0x003d0900

08001c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c20:	4b02      	ldr	r3, [pc, #8]	; (8001c2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	20000000 	.word	0x20000000

08001c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c34:	f7ff fff2 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	4903      	ldr	r1, [pc, #12]	; (8001c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c46:	5ccb      	ldrb	r3, [r1, r3]
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40021000 	.word	0x40021000
 8001c54:	08004384 	.word	0x08004384

08001c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c5c:	f7ff ffde 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c60:	4602      	mov	r2, r0
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	0adb      	lsrs	r3, r3, #11
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	4903      	ldr	r1, [pc, #12]	; (8001c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c6e:	5ccb      	ldrb	r3, [r1, r3]
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	08004384 	.word	0x08004384

08001c80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <RCC_Delay+0x34>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <RCC_Delay+0x38>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	0a5b      	lsrs	r3, r3, #9
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c9c:	bf00      	nop
  }
  while (Delay --);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1e5a      	subs	r2, r3, #1
 8001ca2:	60fa      	str	r2, [r7, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f9      	bne.n	8001c9c <RCC_Delay+0x1c>
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	10624dd3 	.word	0x10624dd3

08001cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d07d      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cdc:	4b4f      	ldr	r3, [pc, #316]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10d      	bne.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	4b4c      	ldr	r3, [pc, #304]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	4a4b      	ldr	r2, [pc, #300]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	61d3      	str	r3, [r2, #28]
 8001cf4:	4b49      	ldr	r3, [pc, #292]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d00:	2301      	movs	r3, #1
 8001d02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d04:	4b46      	ldr	r3, [pc, #280]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d118      	bne.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d10:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a42      	ldr	r2, [pc, #264]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1c:	f7fe fe08 	bl	8000930 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	e008      	b.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d24:	f7fe fe04 	bl	8000930 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	; 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e06d      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	4b3a      	ldr	r3, [pc, #232]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d42:	4b36      	ldr	r3, [pc, #216]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d02e      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d027      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d60:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d6a:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d70:	4b2c      	ldr	r3, [pc, #176]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d76:	4a29      	ldr	r2, [pc, #164]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d014      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d86:	f7fe fdd3 	bl	8000930 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7fe fdcf 	bl	8000930 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e036      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da4:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0ee      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001db0:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4917      	ldr	r1, [pc, #92]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d105      	bne.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	4a13      	ldr	r2, [pc, #76]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	490b      	ldr	r1, [pc, #44]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d008      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4904      	ldr	r1, [pc, #16]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40007000 	.word	0x40007000
 8001e24:	42420440 	.word	0x42420440

08001e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e041      	b.n	8001ebe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d106      	bne.n	8001e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7fe fb8a 	bl	8000568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3304      	adds	r3, #4
 8001e64:	4619      	mov	r1, r3
 8001e66:	4610      	mov	r0, r2
 8001e68:	f000 f8f4 	bl	8002054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b084      	sub	sp, #16
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <HAL_TIM_ConfigClockSource+0x1c>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e0b4      	b.n	800204c <HAL_TIM_ConfigClockSource+0x186>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2202      	movs	r2, #2
 8001eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f00:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f08:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f1a:	d03e      	beq.n	8001f9a <HAL_TIM_ConfigClockSource+0xd4>
 8001f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f20:	f200 8087 	bhi.w	8002032 <HAL_TIM_ConfigClockSource+0x16c>
 8001f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f28:	f000 8086 	beq.w	8002038 <HAL_TIM_ConfigClockSource+0x172>
 8001f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f30:	d87f      	bhi.n	8002032 <HAL_TIM_ConfigClockSource+0x16c>
 8001f32:	2b70      	cmp	r3, #112	; 0x70
 8001f34:	d01a      	beq.n	8001f6c <HAL_TIM_ConfigClockSource+0xa6>
 8001f36:	2b70      	cmp	r3, #112	; 0x70
 8001f38:	d87b      	bhi.n	8002032 <HAL_TIM_ConfigClockSource+0x16c>
 8001f3a:	2b60      	cmp	r3, #96	; 0x60
 8001f3c:	d050      	beq.n	8001fe0 <HAL_TIM_ConfigClockSource+0x11a>
 8001f3e:	2b60      	cmp	r3, #96	; 0x60
 8001f40:	d877      	bhi.n	8002032 <HAL_TIM_ConfigClockSource+0x16c>
 8001f42:	2b50      	cmp	r3, #80	; 0x50
 8001f44:	d03c      	beq.n	8001fc0 <HAL_TIM_ConfigClockSource+0xfa>
 8001f46:	2b50      	cmp	r3, #80	; 0x50
 8001f48:	d873      	bhi.n	8002032 <HAL_TIM_ConfigClockSource+0x16c>
 8001f4a:	2b40      	cmp	r3, #64	; 0x40
 8001f4c:	d058      	beq.n	8002000 <HAL_TIM_ConfigClockSource+0x13a>
 8001f4e:	2b40      	cmp	r3, #64	; 0x40
 8001f50:	d86f      	bhi.n	8002032 <HAL_TIM_ConfigClockSource+0x16c>
 8001f52:	2b30      	cmp	r3, #48	; 0x30
 8001f54:	d064      	beq.n	8002020 <HAL_TIM_ConfigClockSource+0x15a>
 8001f56:	2b30      	cmp	r3, #48	; 0x30
 8001f58:	d86b      	bhi.n	8002032 <HAL_TIM_ConfigClockSource+0x16c>
 8001f5a:	2b20      	cmp	r3, #32
 8001f5c:	d060      	beq.n	8002020 <HAL_TIM_ConfigClockSource+0x15a>
 8001f5e:	2b20      	cmp	r3, #32
 8001f60:	d867      	bhi.n	8002032 <HAL_TIM_ConfigClockSource+0x16c>
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d05c      	beq.n	8002020 <HAL_TIM_ConfigClockSource+0x15a>
 8001f66:	2b10      	cmp	r3, #16
 8001f68:	d05a      	beq.n	8002020 <HAL_TIM_ConfigClockSource+0x15a>
 8001f6a:	e062      	b.n	8002032 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f7c:	f000 f943 	bl	8002206 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f8e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	609a      	str	r2, [r3, #8]
      break;
 8001f98:	e04f      	b.n	800203a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001faa:	f000 f92c 	bl	8002206 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fbc:	609a      	str	r2, [r3, #8]
      break;
 8001fbe:	e03c      	b.n	800203a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fcc:	461a      	mov	r2, r3
 8001fce:	f000 f8a3 	bl	8002118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2150      	movs	r1, #80	; 0x50
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 f8fa 	bl	80021d2 <TIM_ITRx_SetConfig>
      break;
 8001fde:	e02c      	b.n	800203a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fec:	461a      	mov	r2, r3
 8001fee:	f000 f8c1 	bl	8002174 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2160      	movs	r1, #96	; 0x60
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 f8ea 	bl	80021d2 <TIM_ITRx_SetConfig>
      break;
 8001ffe:	e01c      	b.n	800203a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800200c:	461a      	mov	r2, r3
 800200e:	f000 f883 	bl	8002118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2140      	movs	r1, #64	; 0x40
 8002018:	4618      	mov	r0, r3
 800201a:	f000 f8da 	bl	80021d2 <TIM_ITRx_SetConfig>
      break;
 800201e:	e00c      	b.n	800203a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4619      	mov	r1, r3
 800202a:	4610      	mov	r0, r2
 800202c:	f000 f8d1 	bl	80021d2 <TIM_ITRx_SetConfig>
      break;
 8002030:	e003      	b.n	800203a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	73fb      	strb	r3, [r7, #15]
      break;
 8002036:	e000      	b.n	800203a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002038:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a29      	ldr	r2, [pc, #164]	; (800210c <TIM_Base_SetConfig+0xb8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00b      	beq.n	8002084 <TIM_Base_SetConfig+0x30>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002072:	d007      	beq.n	8002084 <TIM_Base_SetConfig+0x30>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a26      	ldr	r2, [pc, #152]	; (8002110 <TIM_Base_SetConfig+0xbc>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d003      	beq.n	8002084 <TIM_Base_SetConfig+0x30>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a25      	ldr	r2, [pc, #148]	; (8002114 <TIM_Base_SetConfig+0xc0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d108      	bne.n	8002096 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800208a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a1c      	ldr	r2, [pc, #112]	; (800210c <TIM_Base_SetConfig+0xb8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00b      	beq.n	80020b6 <TIM_Base_SetConfig+0x62>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a4:	d007      	beq.n	80020b6 <TIM_Base_SetConfig+0x62>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a19      	ldr	r2, [pc, #100]	; (8002110 <TIM_Base_SetConfig+0xbc>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d003      	beq.n	80020b6 <TIM_Base_SetConfig+0x62>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a18      	ldr	r2, [pc, #96]	; (8002114 <TIM_Base_SetConfig+0xc0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d108      	bne.n	80020c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a07      	ldr	r2, [pc, #28]	; (800210c <TIM_Base_SetConfig+0xb8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d103      	bne.n	80020fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	615a      	str	r2, [r3, #20]
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	40012c00 	.word	0x40012c00
 8002110:	40000400 	.word	0x40000400
 8002114:	40000800 	.word	0x40000800

08002118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002118:	b480      	push	{r7}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	f023 0201 	bic.w	r2, r3, #1
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f023 030a 	bic.w	r3, r3, #10
 8002154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4313      	orrs	r3, r2
 800215c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	621a      	str	r2, [r3, #32]
}
 800216a:	bf00      	nop
 800216c:	371c      	adds	r7, #28
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	f023 0210 	bic.w	r2, r3, #16
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800219e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	031b      	lsls	r3, r3, #12
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	621a      	str	r2, [r3, #32]
}
 80021c8:	bf00      	nop
 80021ca:	371c      	adds	r7, #28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b085      	sub	sp, #20
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f043 0307 	orr.w	r3, r3, #7
 80021f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	609a      	str	r2, [r3, #8]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr

08002206 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002206:	b480      	push	{r7}
 8002208:	b087      	sub	sp, #28
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002220:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	021a      	lsls	r2, r3, #8
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	431a      	orrs	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	4313      	orrs	r3, r2
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	4313      	orrs	r3, r2
 8002232:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	609a      	str	r2, [r3, #8]
}
 800223a:	bf00      	nop
 800223c:	371c      	adds	r7, #28
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr

08002244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002258:	2302      	movs	r3, #2
 800225a:	e046      	b.n	80022ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4313      	orrs	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a16      	ldr	r2, [pc, #88]	; (80022f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d00e      	beq.n	80022be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a8:	d009      	beq.n	80022be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d004      	beq.n	80022be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a10      	ldr	r2, [pc, #64]	; (80022fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d10c      	bne.n	80022d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40000800 	.word	0x40000800

08002300 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e042      	b.n	8002398 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe f93a 	bl	80005a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2224      	movs	r2, #36	; 0x24
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002342:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 fdc5 	bl	8002ed4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002358:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695a      	ldr	r2, [r3, #20]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002368:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002378:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d16d      	bne.n	800249c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_UART_Transmit+0x2c>
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e066      	b.n	800249e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2221      	movs	r2, #33	; 0x21
 80023da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023de:	f7fe faa7 	bl	8000930 <HAL_GetTick>
 80023e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	88fa      	ldrh	r2, [r7, #6]
 80023e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	88fa      	ldrh	r2, [r7, #6]
 80023ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f8:	d108      	bne.n	800240c <HAL_UART_Transmit+0x6c>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d104      	bne.n	800240c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	e003      	b.n	8002414 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002410:	2300      	movs	r3, #0
 8002412:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002414:	e02a      	b.n	800246c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2200      	movs	r2, #0
 800241e:	2180      	movs	r1, #128	; 0x80
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 fb14 	bl	8002a4e <UART_WaitOnFlagUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e036      	b.n	800249e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10b      	bne.n	800244e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002444:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	3302      	adds	r3, #2
 800244a:	61bb      	str	r3, [r7, #24]
 800244c:	e007      	b.n	800245e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	781a      	ldrb	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	3301      	adds	r3, #1
 800245c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1cf      	bne.n	8002416 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2200      	movs	r2, #0
 800247e:	2140      	movs	r1, #64	; 0x40
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 fae4 	bl	8002a4e <UART_WaitOnFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e006      	b.n	800249e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	e000      	b.n	800249e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800249c:	2302      	movs	r3, #2
  }
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3720      	adds	r7, #32
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	4613      	mov	r3, r2
 80024b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d112      	bne.n	80024e6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <HAL_UART_Receive_IT+0x26>
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e00b      	b.n	80024e8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	461a      	mov	r2, r3
 80024da:	68b9      	ldr	r1, [r7, #8]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 fb24 	bl	8002b2a <UART_Start_Receive_IT>
 80024e2:	4603      	mov	r3, r0
 80024e4:	e000      	b.n	80024e8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80024e6:	2302      	movs	r3, #2
  }
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b0ba      	sub	sp, #232	; 0xe8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002516:	2300      	movs	r3, #0
 8002518:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800252e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10f      	bne.n	8002556 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <HAL_UART_IRQHandler+0x66>
 8002542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fc01 	bl	8002d56 <UART_Receive_IT>
      return;
 8002554:	e25b      	b.n	8002a0e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002556:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 80de 	beq.w	800271c <HAL_UART_IRQHandler+0x22c>
 8002560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d106      	bne.n	800257a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800256c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002570:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80d1 	beq.w	800271c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800257a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_UART_IRQHandler+0xae>
 8002586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	f043 0201 	orr.w	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800259e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <HAL_UART_IRQHandler+0xd2>
 80025aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f043 0202 	orr.w	r2, r3, #2
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00b      	beq.n	80025e6 <HAL_UART_IRQHandler+0xf6>
 80025ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	f043 0204 	orr.w	r2, r3, #4
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d011      	beq.n	8002616 <HAL_UART_IRQHandler+0x126>
 80025f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025f6:	f003 0320 	and.w	r3, r3, #32
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d105      	bne.n	800260a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f043 0208 	orr.w	r2, r3, #8
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 81f2 	beq.w	8002a04 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_UART_IRQHandler+0x14e>
 800262c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 fb8c 	bl	8002d56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf14      	ite	ne
 800264c:	2301      	movne	r3, #1
 800264e:	2300      	moveq	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <HAL_UART_IRQHandler+0x17a>
 8002662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002666:	2b00      	cmp	r3, #0
 8002668:	d04f      	beq.n	800270a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fa96 	bl	8002b9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d041      	beq.n	8002702 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	3314      	adds	r3, #20
 8002684:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002688:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800268c:	e853 3f00 	ldrex	r3, [r3]
 8002690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002694:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800269c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3314      	adds	r3, #20
 80026a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80026aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80026ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80026b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80026ba:	e841 2300 	strex	r3, r2, [r1]
 80026be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80026c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1d9      	bne.n	800267e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d013      	beq.n	80026fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	4a7e      	ldr	r2, [pc, #504]	; (80028d0 <HAL_UART_IRQHandler+0x3e0>)
 80026d8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe fcae 	bl	8001040 <HAL_DMA_Abort_IT>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d016      	beq.n	8002718 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026f4:	4610      	mov	r0, r2
 80026f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f8:	e00e      	b.n	8002718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f993 	bl	8002a26 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002700:	e00a      	b.n	8002718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f98f 	bl	8002a26 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002708:	e006      	b.n	8002718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f98b 	bl	8002a26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002716:	e175      	b.n	8002a04 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002718:	bf00      	nop
    return;
 800271a:	e173      	b.n	8002a04 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	2b01      	cmp	r3, #1
 8002722:	f040 814f 	bne.w	80029c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 8148 	beq.w	80029c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 8141 	beq.w	80029c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 80b6 	beq.w	80028d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002774:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 8145 	beq.w	8002a08 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002786:	429a      	cmp	r2, r3
 8002788:	f080 813e 	bcs.w	8002a08 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002792:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2b20      	cmp	r3, #32
 800279c:	f000 8088 	beq.w	80028b0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	330c      	adds	r3, #12
 80027a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027ae:	e853 3f00 	ldrex	r3, [r3]
 80027b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80027b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	330c      	adds	r3, #12
 80027c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027cc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027dc:	e841 2300 	strex	r3, r2, [r1]
 80027e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1d9      	bne.n	80027a0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	3314      	adds	r3, #20
 80027f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027f6:	e853 3f00 	ldrex	r3, [r3]
 80027fa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027fe:	f023 0301 	bic.w	r3, r3, #1
 8002802:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3314      	adds	r3, #20
 800280c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002810:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002814:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002816:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002818:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800281c:	e841 2300 	strex	r3, r2, [r1]
 8002820:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1e1      	bne.n	80027ec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3314      	adds	r3, #20
 800282e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002830:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002832:	e853 3f00 	ldrex	r3, [r3]
 8002836:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800283a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800283e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3314      	adds	r3, #20
 8002848:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800284c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800284e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002850:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002852:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002854:	e841 2300 	strex	r3, r2, [r1]
 8002858:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800285a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1e3      	bne.n	8002828 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	330c      	adds	r3, #12
 8002874:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002878:	e853 3f00 	ldrex	r3, [r3]
 800287c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800287e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002880:	f023 0310 	bic.w	r3, r3, #16
 8002884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	330c      	adds	r3, #12
 800288e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002892:	65ba      	str	r2, [r7, #88]	; 0x58
 8002894:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002896:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002898:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800289a:	e841 2300 	strex	r3, r2, [r1]
 800289e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80028a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1e3      	bne.n	800286e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fb8d 	bl	8000fca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028be:	b29b      	uxth	r3, r3
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	4619      	mov	r1, r3
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f8b6 	bl	8002a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028cc:	e09c      	b.n	8002a08 <HAL_UART_IRQHandler+0x518>
 80028ce:	bf00      	nop
 80028d0:	08002c61 	.word	0x08002c61
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028dc:	b29b      	uxth	r3, r3
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 808e 	beq.w	8002a0c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80028f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 8089 	beq.w	8002a0c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	330c      	adds	r3, #12
 8002900:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002904:	e853 3f00 	ldrex	r3, [r3]
 8002908:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800290a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800290c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002910:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	330c      	adds	r3, #12
 800291a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800291e:	647a      	str	r2, [r7, #68]	; 0x44
 8002920:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002922:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002926:	e841 2300 	strex	r3, r2, [r1]
 800292a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800292c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1e3      	bne.n	80028fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3314      	adds	r3, #20
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	e853 3f00 	ldrex	r3, [r3]
 8002940:	623b      	str	r3, [r7, #32]
   return(result);
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3314      	adds	r3, #20
 8002952:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002956:	633a      	str	r2, [r7, #48]	; 0x30
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800295c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800295e:	e841 2300 	strex	r3, r2, [r1]
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1e3      	bne.n	8002932 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	330c      	adds	r3, #12
 800297e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	e853 3f00 	ldrex	r3, [r3]
 8002986:	60fb      	str	r3, [r7, #12]
   return(result);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f023 0310 	bic.w	r3, r3, #16
 800298e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	330c      	adds	r3, #12
 8002998:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800299c:	61fa      	str	r2, [r7, #28]
 800299e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a0:	69b9      	ldr	r1, [r7, #24]
 80029a2:	69fa      	ldr	r2, [r7, #28]
 80029a4:	e841 2300 	strex	r3, r2, [r1]
 80029a8:	617b      	str	r3, [r7, #20]
   return(result);
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1e3      	bne.n	8002978 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029ba:	4619      	mov	r1, r3
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f83b 	bl	8002a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029c2:	e023      	b.n	8002a0c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d009      	beq.n	80029e4 <HAL_UART_IRQHandler+0x4f4>
 80029d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f953 	bl	8002c88 <UART_Transmit_IT>
    return;
 80029e2:	e014      	b.n	8002a0e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00e      	beq.n	8002a0e <HAL_UART_IRQHandler+0x51e>
 80029f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f992 	bl	8002d26 <UART_EndTransmit_IT>
    return;
 8002a02:	e004      	b.n	8002a0e <HAL_UART_IRQHandler+0x51e>
    return;
 8002a04:	bf00      	nop
 8002a06:	e002      	b.n	8002a0e <HAL_UART_IRQHandler+0x51e>
      return;
 8002a08:	bf00      	nop
 8002a0a:	e000      	b.n	8002a0e <HAL_UART_IRQHandler+0x51e>
      return;
 8002a0c:	bf00      	nop
  }
}
 8002a0e:	37e8      	adds	r7, #232	; 0xe8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b090      	sub	sp, #64	; 0x40
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a5e:	e050      	b.n	8002b02 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a66:	d04c      	beq.n	8002b02 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d007      	beq.n	8002a7e <UART_WaitOnFlagUntilTimeout+0x30>
 8002a6e:	f7fd ff5f 	bl	8000930 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d241      	bcs.n	8002b02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	330c      	adds	r3, #12
 8002a84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a88:	e853 3f00 	ldrex	r3, [r3]
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	330c      	adds	r3, #12
 8002a9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a9e:	637a      	str	r2, [r7, #52]	; 0x34
 8002aa0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aa6:	e841 2300 	strex	r3, r2, [r1]
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1e5      	bne.n	8002a7e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3314      	adds	r3, #20
 8002ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	e853 3f00 	ldrex	r3, [r3]
 8002ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3314      	adds	r3, #20
 8002ad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ad2:	623a      	str	r2, [r7, #32]
 8002ad4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad6:	69f9      	ldr	r1, [r7, #28]
 8002ad8:	6a3a      	ldr	r2, [r7, #32]
 8002ada:	e841 2300 	strex	r3, r2, [r1]
 8002ade:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1e5      	bne.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e00f      	b.n	8002b22 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	bf0c      	ite	eq
 8002b12:	2301      	moveq	r3, #1
 8002b14:	2300      	movne	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d09f      	beq.n	8002a60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3740      	adds	r7, #64	; 0x40
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b085      	sub	sp, #20
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	4613      	mov	r3, r2
 8002b36:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	88fa      	ldrh	r2, [r7, #6]
 8002b42:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	88fa      	ldrh	r2, [r7, #6]
 8002b48:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2222      	movs	r2, #34	; 0x22
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b6e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0220 	orr.w	r2, r2, #32
 8002b8e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b095      	sub	sp, #84	; 0x54
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bae:	e853 3f00 	ldrex	r3, [r3]
 8002bb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	330c      	adds	r3, #12
 8002bc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bc4:	643a      	str	r2, [r7, #64]	; 0x40
 8002bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bcc:	e841 2300 	strex	r3, r2, [r1]
 8002bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1e5      	bne.n	8002ba4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3314      	adds	r3, #20
 8002bde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	e853 3f00 	ldrex	r3, [r3]
 8002be6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f023 0301 	bic.w	r3, r3, #1
 8002bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3314      	adds	r3, #20
 8002bf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c00:	e841 2300 	strex	r3, r2, [r1]
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1e5      	bne.n	8002bd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d119      	bne.n	8002c48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	330c      	adds	r3, #12
 8002c1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	e853 3f00 	ldrex	r3, [r3]
 8002c22:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f023 0310 	bic.w	r3, r3, #16
 8002c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	330c      	adds	r3, #12
 8002c32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c34:	61ba      	str	r2, [r7, #24]
 8002c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c38:	6979      	ldr	r1, [r7, #20]
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	e841 2300 	strex	r3, r2, [r1]
 8002c40:	613b      	str	r3, [r7, #16]
   return(result);
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1e5      	bne.n	8002c14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c56:	bf00      	nop
 8002c58:	3754      	adds	r7, #84	; 0x54
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f7ff fed3 	bl	8002a26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c80:	bf00      	nop
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b21      	cmp	r3, #33	; 0x21
 8002c9a:	d13e      	bne.n	8002d1a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca4:	d114      	bne.n	8002cd0 <UART_Transmit_IT+0x48>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d110      	bne.n	8002cd0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cc2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	1c9a      	adds	r2, r3, #2
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	621a      	str	r2, [r3, #32]
 8002cce:	e008      	b.n	8002ce2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	1c59      	adds	r1, r3, #1
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6211      	str	r1, [r2, #32]
 8002cda:	781a      	ldrb	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	4619      	mov	r1, r3
 8002cf0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10f      	bne.n	8002d16 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e000      	b.n	8002d1c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d1a:	2302      	movs	r3, #2
  }
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr

08002d26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff fe64 	bl	8002a14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b08c      	sub	sp, #48	; 0x30
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b22      	cmp	r3, #34	; 0x22
 8002d68:	f040 80ae 	bne.w	8002ec8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d74:	d117      	bne.n	8002da6 <UART_Receive_IT+0x50>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d113      	bne.n	8002da6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	1c9a      	adds	r2, r3, #2
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
 8002da4:	e026      	b.n	8002df4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db8:	d007      	beq.n	8002dca <UART_Receive_IT+0x74>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10a      	bne.n	8002dd8 <UART_Receive_IT+0x82>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e008      	b.n	8002dea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	4619      	mov	r1, r3
 8002e02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d15d      	bne.n	8002ec4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0220 	bic.w	r2, r2, #32
 8002e16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d135      	bne.n	8002eba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	e853 3f00 	ldrex	r3, [r3]
 8002e62:	613b      	str	r3, [r7, #16]
   return(result);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f023 0310 	bic.w	r3, r3, #16
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	330c      	adds	r3, #12
 8002e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e74:	623a      	str	r2, [r7, #32]
 8002e76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e78:	69f9      	ldr	r1, [r7, #28]
 8002e7a:	6a3a      	ldr	r2, [r7, #32]
 8002e7c:	e841 2300 	strex	r3, r2, [r1]
 8002e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e5      	bne.n	8002e54 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b10      	cmp	r3, #16
 8002e94:	d10a      	bne.n	8002eac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff fdc0 	bl	8002a38 <HAL_UARTEx_RxEventCallback>
 8002eb8:	e002      	b.n	8002ec0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fd f946 	bl	800014c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e002      	b.n	8002eca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e000      	b.n	8002eca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002ec8:	2302      	movs	r3, #2
  }
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3730      	adds	r7, #48	; 0x30
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f0e:	f023 030c 	bic.w	r3, r3, #12
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6812      	ldr	r2, [r2, #0]
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a2c      	ldr	r2, [pc, #176]	; (8002fe8 <UART_SetConfig+0x114>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d103      	bne.n	8002f44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f3c:	f7fe fe8c 	bl	8001c58 <HAL_RCC_GetPCLK2Freq>
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	e002      	b.n	8002f4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f44:	f7fe fe74 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 8002f48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	009a      	lsls	r2, r3, #2
 8002f54:	441a      	add	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f60:	4a22      	ldr	r2, [pc, #136]	; (8002fec <UART_SetConfig+0x118>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	0119      	lsls	r1, r3, #4
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	009a      	lsls	r2, r3, #2
 8002f74:	441a      	add	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f80:	4b1a      	ldr	r3, [pc, #104]	; (8002fec <UART_SetConfig+0x118>)
 8002f82:	fba3 0302 	umull	r0, r3, r3, r2
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	2064      	movs	r0, #100	; 0x64
 8002f8a:	fb00 f303 	mul.w	r3, r0, r3
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	3332      	adds	r3, #50	; 0x32
 8002f94:	4a15      	ldr	r2, [pc, #84]	; (8002fec <UART_SetConfig+0x118>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fa0:	4419      	add	r1, r3
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	009a      	lsls	r2, r3, #2
 8002fac:	441a      	add	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <UART_SetConfig+0x118>)
 8002fba:	fba3 0302 	umull	r0, r3, r3, r2
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	2064      	movs	r0, #100	; 0x64
 8002fc2:	fb00 f303 	mul.w	r3, r0, r3
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	3332      	adds	r3, #50	; 0x32
 8002fcc:	4a07      	ldr	r2, [pc, #28]	; (8002fec <UART_SetConfig+0x118>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	f003 020f 	and.w	r2, r3, #15
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	440a      	add	r2, r1
 8002fde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40013800 	.word	0x40013800
 8002fec:	51eb851f 	.word	0x51eb851f

08002ff0 <rand>:
 8002ff0:	4b16      	ldr	r3, [pc, #88]	; (800304c <rand+0x5c>)
 8002ff2:	b510      	push	{r4, lr}
 8002ff4:	681c      	ldr	r4, [r3, #0]
 8002ff6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ff8:	b9b3      	cbnz	r3, 8003028 <rand+0x38>
 8002ffa:	2018      	movs	r0, #24
 8002ffc:	f000 fa2a 	bl	8003454 <malloc>
 8003000:	4602      	mov	r2, r0
 8003002:	6320      	str	r0, [r4, #48]	; 0x30
 8003004:	b920      	cbnz	r0, 8003010 <rand+0x20>
 8003006:	2152      	movs	r1, #82	; 0x52
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <rand+0x60>)
 800300a:	4812      	ldr	r0, [pc, #72]	; (8003054 <rand+0x64>)
 800300c:	f000 f9bc 	bl	8003388 <__assert_func>
 8003010:	4911      	ldr	r1, [pc, #68]	; (8003058 <rand+0x68>)
 8003012:	4b12      	ldr	r3, [pc, #72]	; (800305c <rand+0x6c>)
 8003014:	e9c0 1300 	strd	r1, r3, [r0]
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <rand+0x70>)
 800301a:	2100      	movs	r1, #0
 800301c:	6083      	str	r3, [r0, #8]
 800301e:	230b      	movs	r3, #11
 8003020:	8183      	strh	r3, [r0, #12]
 8003022:	2001      	movs	r0, #1
 8003024:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003028:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800302a:	480e      	ldr	r0, [pc, #56]	; (8003064 <rand+0x74>)
 800302c:	690b      	ldr	r3, [r1, #16]
 800302e:	694c      	ldr	r4, [r1, #20]
 8003030:	4358      	muls	r0, r3
 8003032:	4a0d      	ldr	r2, [pc, #52]	; (8003068 <rand+0x78>)
 8003034:	fb02 0004 	mla	r0, r2, r4, r0
 8003038:	fba3 3202 	umull	r3, r2, r3, r2
 800303c:	3301      	adds	r3, #1
 800303e:	eb40 0002 	adc.w	r0, r0, r2
 8003042:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003046:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800304a:	bd10      	pop	{r4, pc}
 800304c:	20000064 	.word	0x20000064
 8003050:	0800439e 	.word	0x0800439e
 8003054:	080043b5 	.word	0x080043b5
 8003058:	abcd330e 	.word	0xabcd330e
 800305c:	e66d1234 	.word	0xe66d1234
 8003060:	0005deec 	.word	0x0005deec
 8003064:	5851f42d 	.word	0x5851f42d
 8003068:	4c957f2d 	.word	0x4c957f2d

0800306c <std>:
 800306c:	2300      	movs	r3, #0
 800306e:	b510      	push	{r4, lr}
 8003070:	4604      	mov	r4, r0
 8003072:	e9c0 3300 	strd	r3, r3, [r0]
 8003076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800307a:	6083      	str	r3, [r0, #8]
 800307c:	8181      	strh	r1, [r0, #12]
 800307e:	6643      	str	r3, [r0, #100]	; 0x64
 8003080:	81c2      	strh	r2, [r0, #14]
 8003082:	6183      	str	r3, [r0, #24]
 8003084:	4619      	mov	r1, r3
 8003086:	2208      	movs	r2, #8
 8003088:	305c      	adds	r0, #92	; 0x5c
 800308a:	f000 f902 	bl	8003292 <memset>
 800308e:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <std+0x38>)
 8003090:	6224      	str	r4, [r4, #32]
 8003092:	6263      	str	r3, [r4, #36]	; 0x24
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <std+0x3c>)
 8003096:	62a3      	str	r3, [r4, #40]	; 0x28
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <std+0x40>)
 800309a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <std+0x44>)
 800309e:	6323      	str	r3, [r4, #48]	; 0x30
 80030a0:	bd10      	pop	{r4, pc}
 80030a2:	bf00      	nop
 80030a4:	0800320d 	.word	0x0800320d
 80030a8:	0800322f 	.word	0x0800322f
 80030ac:	08003267 	.word	0x08003267
 80030b0:	0800328b 	.word	0x0800328b

080030b4 <stdio_exit_handler>:
 80030b4:	4a02      	ldr	r2, [pc, #8]	; (80030c0 <stdio_exit_handler+0xc>)
 80030b6:	4903      	ldr	r1, [pc, #12]	; (80030c4 <stdio_exit_handler+0x10>)
 80030b8:	4803      	ldr	r0, [pc, #12]	; (80030c8 <stdio_exit_handler+0x14>)
 80030ba:	f000 b869 	b.w	8003190 <_fwalk_sglue>
 80030be:	bf00      	nop
 80030c0:	2000000c 	.word	0x2000000c
 80030c4:	08003c99 	.word	0x08003c99
 80030c8:	20000018 	.word	0x20000018

080030cc <cleanup_stdio>:
 80030cc:	6841      	ldr	r1, [r0, #4]
 80030ce:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <cleanup_stdio+0x34>)
 80030d0:	b510      	push	{r4, lr}
 80030d2:	4299      	cmp	r1, r3
 80030d4:	4604      	mov	r4, r0
 80030d6:	d001      	beq.n	80030dc <cleanup_stdio+0x10>
 80030d8:	f000 fdde 	bl	8003c98 <_fflush_r>
 80030dc:	68a1      	ldr	r1, [r4, #8]
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <cleanup_stdio+0x38>)
 80030e0:	4299      	cmp	r1, r3
 80030e2:	d002      	beq.n	80030ea <cleanup_stdio+0x1e>
 80030e4:	4620      	mov	r0, r4
 80030e6:	f000 fdd7 	bl	8003c98 <_fflush_r>
 80030ea:	68e1      	ldr	r1, [r4, #12]
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <cleanup_stdio+0x3c>)
 80030ee:	4299      	cmp	r1, r3
 80030f0:	d004      	beq.n	80030fc <cleanup_stdio+0x30>
 80030f2:	4620      	mov	r0, r4
 80030f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030f8:	f000 bdce 	b.w	8003c98 <_fflush_r>
 80030fc:	bd10      	pop	{r4, pc}
 80030fe:	bf00      	nop
 8003100:	20000150 	.word	0x20000150
 8003104:	200001b8 	.word	0x200001b8
 8003108:	20000220 	.word	0x20000220

0800310c <global_stdio_init.part.0>:
 800310c:	b510      	push	{r4, lr}
 800310e:	4b0b      	ldr	r3, [pc, #44]	; (800313c <global_stdio_init.part.0+0x30>)
 8003110:	4c0b      	ldr	r4, [pc, #44]	; (8003140 <global_stdio_init.part.0+0x34>)
 8003112:	4a0c      	ldr	r2, [pc, #48]	; (8003144 <global_stdio_init.part.0+0x38>)
 8003114:	4620      	mov	r0, r4
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	2104      	movs	r1, #4
 800311a:	2200      	movs	r2, #0
 800311c:	f7ff ffa6 	bl	800306c <std>
 8003120:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003124:	2201      	movs	r2, #1
 8003126:	2109      	movs	r1, #9
 8003128:	f7ff ffa0 	bl	800306c <std>
 800312c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003130:	2202      	movs	r2, #2
 8003132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003136:	2112      	movs	r1, #18
 8003138:	f7ff bf98 	b.w	800306c <std>
 800313c:	20000288 	.word	0x20000288
 8003140:	20000150 	.word	0x20000150
 8003144:	080030b5 	.word	0x080030b5

08003148 <__sfp_lock_acquire>:
 8003148:	4801      	ldr	r0, [pc, #4]	; (8003150 <__sfp_lock_acquire+0x8>)
 800314a:	f000 b91b 	b.w	8003384 <__retarget_lock_acquire_recursive>
 800314e:	bf00      	nop
 8003150:	20000291 	.word	0x20000291

08003154 <__sfp_lock_release>:
 8003154:	4801      	ldr	r0, [pc, #4]	; (800315c <__sfp_lock_release+0x8>)
 8003156:	f000 b916 	b.w	8003386 <__retarget_lock_release_recursive>
 800315a:	bf00      	nop
 800315c:	20000291 	.word	0x20000291

08003160 <__sinit>:
 8003160:	b510      	push	{r4, lr}
 8003162:	4604      	mov	r4, r0
 8003164:	f7ff fff0 	bl	8003148 <__sfp_lock_acquire>
 8003168:	6a23      	ldr	r3, [r4, #32]
 800316a:	b11b      	cbz	r3, 8003174 <__sinit+0x14>
 800316c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003170:	f7ff bff0 	b.w	8003154 <__sfp_lock_release>
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <__sinit+0x28>)
 8003176:	6223      	str	r3, [r4, #32]
 8003178:	4b04      	ldr	r3, [pc, #16]	; (800318c <__sinit+0x2c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f5      	bne.n	800316c <__sinit+0xc>
 8003180:	f7ff ffc4 	bl	800310c <global_stdio_init.part.0>
 8003184:	e7f2      	b.n	800316c <__sinit+0xc>
 8003186:	bf00      	nop
 8003188:	080030cd 	.word	0x080030cd
 800318c:	20000288 	.word	0x20000288

08003190 <_fwalk_sglue>:
 8003190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003194:	4607      	mov	r7, r0
 8003196:	4688      	mov	r8, r1
 8003198:	4614      	mov	r4, r2
 800319a:	2600      	movs	r6, #0
 800319c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031a0:	f1b9 0901 	subs.w	r9, r9, #1
 80031a4:	d505      	bpl.n	80031b2 <_fwalk_sglue+0x22>
 80031a6:	6824      	ldr	r4, [r4, #0]
 80031a8:	2c00      	cmp	r4, #0
 80031aa:	d1f7      	bne.n	800319c <_fwalk_sglue+0xc>
 80031ac:	4630      	mov	r0, r6
 80031ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031b2:	89ab      	ldrh	r3, [r5, #12]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d907      	bls.n	80031c8 <_fwalk_sglue+0x38>
 80031b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031bc:	3301      	adds	r3, #1
 80031be:	d003      	beq.n	80031c8 <_fwalk_sglue+0x38>
 80031c0:	4629      	mov	r1, r5
 80031c2:	4638      	mov	r0, r7
 80031c4:	47c0      	blx	r8
 80031c6:	4306      	orrs	r6, r0
 80031c8:	3568      	adds	r5, #104	; 0x68
 80031ca:	e7e9      	b.n	80031a0 <_fwalk_sglue+0x10>

080031cc <siprintf>:
 80031cc:	b40e      	push	{r1, r2, r3}
 80031ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031d2:	b500      	push	{lr}
 80031d4:	b09c      	sub	sp, #112	; 0x70
 80031d6:	ab1d      	add	r3, sp, #116	; 0x74
 80031d8:	9002      	str	r0, [sp, #8]
 80031da:	9006      	str	r0, [sp, #24]
 80031dc:	9107      	str	r1, [sp, #28]
 80031de:	9104      	str	r1, [sp, #16]
 80031e0:	4808      	ldr	r0, [pc, #32]	; (8003204 <siprintf+0x38>)
 80031e2:	4909      	ldr	r1, [pc, #36]	; (8003208 <siprintf+0x3c>)
 80031e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80031e8:	9105      	str	r1, [sp, #20]
 80031ea:	6800      	ldr	r0, [r0, #0]
 80031ec:	a902      	add	r1, sp, #8
 80031ee:	9301      	str	r3, [sp, #4]
 80031f0:	f000 fa3e 	bl	8003670 <_svfiprintf_r>
 80031f4:	2200      	movs	r2, #0
 80031f6:	9b02      	ldr	r3, [sp, #8]
 80031f8:	701a      	strb	r2, [r3, #0]
 80031fa:	b01c      	add	sp, #112	; 0x70
 80031fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003200:	b003      	add	sp, #12
 8003202:	4770      	bx	lr
 8003204:	20000064 	.word	0x20000064
 8003208:	ffff0208 	.word	0xffff0208

0800320c <__sread>:
 800320c:	b510      	push	{r4, lr}
 800320e:	460c      	mov	r4, r1
 8003210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003214:	f000 f868 	bl	80032e8 <_read_r>
 8003218:	2800      	cmp	r0, #0
 800321a:	bfab      	itete	ge
 800321c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800321e:	89a3      	ldrhlt	r3, [r4, #12]
 8003220:	181b      	addge	r3, r3, r0
 8003222:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003226:	bfac      	ite	ge
 8003228:	6563      	strge	r3, [r4, #84]	; 0x54
 800322a:	81a3      	strhlt	r3, [r4, #12]
 800322c:	bd10      	pop	{r4, pc}

0800322e <__swrite>:
 800322e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003232:	461f      	mov	r7, r3
 8003234:	898b      	ldrh	r3, [r1, #12]
 8003236:	4605      	mov	r5, r0
 8003238:	05db      	lsls	r3, r3, #23
 800323a:	460c      	mov	r4, r1
 800323c:	4616      	mov	r6, r2
 800323e:	d505      	bpl.n	800324c <__swrite+0x1e>
 8003240:	2302      	movs	r3, #2
 8003242:	2200      	movs	r2, #0
 8003244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003248:	f000 f83c 	bl	80032c4 <_lseek_r>
 800324c:	89a3      	ldrh	r3, [r4, #12]
 800324e:	4632      	mov	r2, r6
 8003250:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003254:	81a3      	strh	r3, [r4, #12]
 8003256:	4628      	mov	r0, r5
 8003258:	463b      	mov	r3, r7
 800325a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800325e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003262:	f000 b853 	b.w	800330c <_write_r>

08003266 <__sseek>:
 8003266:	b510      	push	{r4, lr}
 8003268:	460c      	mov	r4, r1
 800326a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800326e:	f000 f829 	bl	80032c4 <_lseek_r>
 8003272:	1c43      	adds	r3, r0, #1
 8003274:	89a3      	ldrh	r3, [r4, #12]
 8003276:	bf15      	itete	ne
 8003278:	6560      	strne	r0, [r4, #84]	; 0x54
 800327a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800327e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003282:	81a3      	strheq	r3, [r4, #12]
 8003284:	bf18      	it	ne
 8003286:	81a3      	strhne	r3, [r4, #12]
 8003288:	bd10      	pop	{r4, pc}

0800328a <__sclose>:
 800328a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800328e:	f000 b809 	b.w	80032a4 <_close_r>

08003292 <memset>:
 8003292:	4603      	mov	r3, r0
 8003294:	4402      	add	r2, r0
 8003296:	4293      	cmp	r3, r2
 8003298:	d100      	bne.n	800329c <memset+0xa>
 800329a:	4770      	bx	lr
 800329c:	f803 1b01 	strb.w	r1, [r3], #1
 80032a0:	e7f9      	b.n	8003296 <memset+0x4>
	...

080032a4 <_close_r>:
 80032a4:	b538      	push	{r3, r4, r5, lr}
 80032a6:	2300      	movs	r3, #0
 80032a8:	4d05      	ldr	r5, [pc, #20]	; (80032c0 <_close_r+0x1c>)
 80032aa:	4604      	mov	r4, r0
 80032ac:	4608      	mov	r0, r1
 80032ae:	602b      	str	r3, [r5, #0]
 80032b0:	f7fd fa54 	bl	800075c <_close>
 80032b4:	1c43      	adds	r3, r0, #1
 80032b6:	d102      	bne.n	80032be <_close_r+0x1a>
 80032b8:	682b      	ldr	r3, [r5, #0]
 80032ba:	b103      	cbz	r3, 80032be <_close_r+0x1a>
 80032bc:	6023      	str	r3, [r4, #0]
 80032be:	bd38      	pop	{r3, r4, r5, pc}
 80032c0:	2000028c 	.word	0x2000028c

080032c4 <_lseek_r>:
 80032c4:	b538      	push	{r3, r4, r5, lr}
 80032c6:	4604      	mov	r4, r0
 80032c8:	4608      	mov	r0, r1
 80032ca:	4611      	mov	r1, r2
 80032cc:	2200      	movs	r2, #0
 80032ce:	4d05      	ldr	r5, [pc, #20]	; (80032e4 <_lseek_r+0x20>)
 80032d0:	602a      	str	r2, [r5, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	f7fd fa66 	bl	80007a4 <_lseek>
 80032d8:	1c43      	adds	r3, r0, #1
 80032da:	d102      	bne.n	80032e2 <_lseek_r+0x1e>
 80032dc:	682b      	ldr	r3, [r5, #0]
 80032de:	b103      	cbz	r3, 80032e2 <_lseek_r+0x1e>
 80032e0:	6023      	str	r3, [r4, #0]
 80032e2:	bd38      	pop	{r3, r4, r5, pc}
 80032e4:	2000028c 	.word	0x2000028c

080032e8 <_read_r>:
 80032e8:	b538      	push	{r3, r4, r5, lr}
 80032ea:	4604      	mov	r4, r0
 80032ec:	4608      	mov	r0, r1
 80032ee:	4611      	mov	r1, r2
 80032f0:	2200      	movs	r2, #0
 80032f2:	4d05      	ldr	r5, [pc, #20]	; (8003308 <_read_r+0x20>)
 80032f4:	602a      	str	r2, [r5, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	f7fd f9f7 	bl	80006ea <_read>
 80032fc:	1c43      	adds	r3, r0, #1
 80032fe:	d102      	bne.n	8003306 <_read_r+0x1e>
 8003300:	682b      	ldr	r3, [r5, #0]
 8003302:	b103      	cbz	r3, 8003306 <_read_r+0x1e>
 8003304:	6023      	str	r3, [r4, #0]
 8003306:	bd38      	pop	{r3, r4, r5, pc}
 8003308:	2000028c 	.word	0x2000028c

0800330c <_write_r>:
 800330c:	b538      	push	{r3, r4, r5, lr}
 800330e:	4604      	mov	r4, r0
 8003310:	4608      	mov	r0, r1
 8003312:	4611      	mov	r1, r2
 8003314:	2200      	movs	r2, #0
 8003316:	4d05      	ldr	r5, [pc, #20]	; (800332c <_write_r+0x20>)
 8003318:	602a      	str	r2, [r5, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	f7fd fa02 	bl	8000724 <_write>
 8003320:	1c43      	adds	r3, r0, #1
 8003322:	d102      	bne.n	800332a <_write_r+0x1e>
 8003324:	682b      	ldr	r3, [r5, #0]
 8003326:	b103      	cbz	r3, 800332a <_write_r+0x1e>
 8003328:	6023      	str	r3, [r4, #0]
 800332a:	bd38      	pop	{r3, r4, r5, pc}
 800332c:	2000028c 	.word	0x2000028c

08003330 <__errno>:
 8003330:	4b01      	ldr	r3, [pc, #4]	; (8003338 <__errno+0x8>)
 8003332:	6818      	ldr	r0, [r3, #0]
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000064 	.word	0x20000064

0800333c <__libc_init_array>:
 800333c:	b570      	push	{r4, r5, r6, lr}
 800333e:	2600      	movs	r6, #0
 8003340:	4d0c      	ldr	r5, [pc, #48]	; (8003374 <__libc_init_array+0x38>)
 8003342:	4c0d      	ldr	r4, [pc, #52]	; (8003378 <__libc_init_array+0x3c>)
 8003344:	1b64      	subs	r4, r4, r5
 8003346:	10a4      	asrs	r4, r4, #2
 8003348:	42a6      	cmp	r6, r4
 800334a:	d109      	bne.n	8003360 <__libc_init_array+0x24>
 800334c:	f001 f802 	bl	8004354 <_init>
 8003350:	2600      	movs	r6, #0
 8003352:	4d0a      	ldr	r5, [pc, #40]	; (800337c <__libc_init_array+0x40>)
 8003354:	4c0a      	ldr	r4, [pc, #40]	; (8003380 <__libc_init_array+0x44>)
 8003356:	1b64      	subs	r4, r4, r5
 8003358:	10a4      	asrs	r4, r4, #2
 800335a:	42a6      	cmp	r6, r4
 800335c:	d105      	bne.n	800336a <__libc_init_array+0x2e>
 800335e:	bd70      	pop	{r4, r5, r6, pc}
 8003360:	f855 3b04 	ldr.w	r3, [r5], #4
 8003364:	4798      	blx	r3
 8003366:	3601      	adds	r6, #1
 8003368:	e7ee      	b.n	8003348 <__libc_init_array+0xc>
 800336a:	f855 3b04 	ldr.w	r3, [r5], #4
 800336e:	4798      	blx	r3
 8003370:	3601      	adds	r6, #1
 8003372:	e7f2      	b.n	800335a <__libc_init_array+0x1e>
 8003374:	0800447c 	.word	0x0800447c
 8003378:	0800447c 	.word	0x0800447c
 800337c:	0800447c 	.word	0x0800447c
 8003380:	08004480 	.word	0x08004480

08003384 <__retarget_lock_acquire_recursive>:
 8003384:	4770      	bx	lr

08003386 <__retarget_lock_release_recursive>:
 8003386:	4770      	bx	lr

08003388 <__assert_func>:
 8003388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800338a:	4614      	mov	r4, r2
 800338c:	461a      	mov	r2, r3
 800338e:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <__assert_func+0x2c>)
 8003390:	4605      	mov	r5, r0
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68d8      	ldr	r0, [r3, #12]
 8003396:	b14c      	cbz	r4, 80033ac <__assert_func+0x24>
 8003398:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <__assert_func+0x30>)
 800339a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800339e:	9100      	str	r1, [sp, #0]
 80033a0:	462b      	mov	r3, r5
 80033a2:	4906      	ldr	r1, [pc, #24]	; (80033bc <__assert_func+0x34>)
 80033a4:	f000 fca0 	bl	8003ce8 <fiprintf>
 80033a8:	f000 fcf6 	bl	8003d98 <abort>
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <__assert_func+0x38>)
 80033ae:	461c      	mov	r4, r3
 80033b0:	e7f3      	b.n	800339a <__assert_func+0x12>
 80033b2:	bf00      	nop
 80033b4:	20000064 	.word	0x20000064
 80033b8:	0800440d 	.word	0x0800440d
 80033bc:	0800441a 	.word	0x0800441a
 80033c0:	08004448 	.word	0x08004448

080033c4 <_free_r>:
 80033c4:	b538      	push	{r3, r4, r5, lr}
 80033c6:	4605      	mov	r5, r0
 80033c8:	2900      	cmp	r1, #0
 80033ca:	d040      	beq.n	800344e <_free_r+0x8a>
 80033cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033d0:	1f0c      	subs	r4, r1, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	bfb8      	it	lt
 80033d6:	18e4      	addlt	r4, r4, r3
 80033d8:	f000 f8e4 	bl	80035a4 <__malloc_lock>
 80033dc:	4a1c      	ldr	r2, [pc, #112]	; (8003450 <_free_r+0x8c>)
 80033de:	6813      	ldr	r3, [r2, #0]
 80033e0:	b933      	cbnz	r3, 80033f0 <_free_r+0x2c>
 80033e2:	6063      	str	r3, [r4, #4]
 80033e4:	6014      	str	r4, [r2, #0]
 80033e6:	4628      	mov	r0, r5
 80033e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033ec:	f000 b8e0 	b.w	80035b0 <__malloc_unlock>
 80033f0:	42a3      	cmp	r3, r4
 80033f2:	d908      	bls.n	8003406 <_free_r+0x42>
 80033f4:	6820      	ldr	r0, [r4, #0]
 80033f6:	1821      	adds	r1, r4, r0
 80033f8:	428b      	cmp	r3, r1
 80033fa:	bf01      	itttt	eq
 80033fc:	6819      	ldreq	r1, [r3, #0]
 80033fe:	685b      	ldreq	r3, [r3, #4]
 8003400:	1809      	addeq	r1, r1, r0
 8003402:	6021      	streq	r1, [r4, #0]
 8003404:	e7ed      	b.n	80033e2 <_free_r+0x1e>
 8003406:	461a      	mov	r2, r3
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	b10b      	cbz	r3, 8003410 <_free_r+0x4c>
 800340c:	42a3      	cmp	r3, r4
 800340e:	d9fa      	bls.n	8003406 <_free_r+0x42>
 8003410:	6811      	ldr	r1, [r2, #0]
 8003412:	1850      	adds	r0, r2, r1
 8003414:	42a0      	cmp	r0, r4
 8003416:	d10b      	bne.n	8003430 <_free_r+0x6c>
 8003418:	6820      	ldr	r0, [r4, #0]
 800341a:	4401      	add	r1, r0
 800341c:	1850      	adds	r0, r2, r1
 800341e:	4283      	cmp	r3, r0
 8003420:	6011      	str	r1, [r2, #0]
 8003422:	d1e0      	bne.n	80033e6 <_free_r+0x22>
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	4408      	add	r0, r1
 800342a:	6010      	str	r0, [r2, #0]
 800342c:	6053      	str	r3, [r2, #4]
 800342e:	e7da      	b.n	80033e6 <_free_r+0x22>
 8003430:	d902      	bls.n	8003438 <_free_r+0x74>
 8003432:	230c      	movs	r3, #12
 8003434:	602b      	str	r3, [r5, #0]
 8003436:	e7d6      	b.n	80033e6 <_free_r+0x22>
 8003438:	6820      	ldr	r0, [r4, #0]
 800343a:	1821      	adds	r1, r4, r0
 800343c:	428b      	cmp	r3, r1
 800343e:	bf01      	itttt	eq
 8003440:	6819      	ldreq	r1, [r3, #0]
 8003442:	685b      	ldreq	r3, [r3, #4]
 8003444:	1809      	addeq	r1, r1, r0
 8003446:	6021      	streq	r1, [r4, #0]
 8003448:	6063      	str	r3, [r4, #4]
 800344a:	6054      	str	r4, [r2, #4]
 800344c:	e7cb      	b.n	80033e6 <_free_r+0x22>
 800344e:	bd38      	pop	{r3, r4, r5, pc}
 8003450:	20000294 	.word	0x20000294

08003454 <malloc>:
 8003454:	4b02      	ldr	r3, [pc, #8]	; (8003460 <malloc+0xc>)
 8003456:	4601      	mov	r1, r0
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	f000 b823 	b.w	80034a4 <_malloc_r>
 800345e:	bf00      	nop
 8003460:	20000064 	.word	0x20000064

08003464 <sbrk_aligned>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	4e0e      	ldr	r6, [pc, #56]	; (80034a0 <sbrk_aligned+0x3c>)
 8003468:	460c      	mov	r4, r1
 800346a:	6831      	ldr	r1, [r6, #0]
 800346c:	4605      	mov	r5, r0
 800346e:	b911      	cbnz	r1, 8003476 <sbrk_aligned+0x12>
 8003470:	f000 fc66 	bl	8003d40 <_sbrk_r>
 8003474:	6030      	str	r0, [r6, #0]
 8003476:	4621      	mov	r1, r4
 8003478:	4628      	mov	r0, r5
 800347a:	f000 fc61 	bl	8003d40 <_sbrk_r>
 800347e:	1c43      	adds	r3, r0, #1
 8003480:	d00a      	beq.n	8003498 <sbrk_aligned+0x34>
 8003482:	1cc4      	adds	r4, r0, #3
 8003484:	f024 0403 	bic.w	r4, r4, #3
 8003488:	42a0      	cmp	r0, r4
 800348a:	d007      	beq.n	800349c <sbrk_aligned+0x38>
 800348c:	1a21      	subs	r1, r4, r0
 800348e:	4628      	mov	r0, r5
 8003490:	f000 fc56 	bl	8003d40 <_sbrk_r>
 8003494:	3001      	adds	r0, #1
 8003496:	d101      	bne.n	800349c <sbrk_aligned+0x38>
 8003498:	f04f 34ff 	mov.w	r4, #4294967295
 800349c:	4620      	mov	r0, r4
 800349e:	bd70      	pop	{r4, r5, r6, pc}
 80034a0:	20000298 	.word	0x20000298

080034a4 <_malloc_r>:
 80034a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034a8:	1ccd      	adds	r5, r1, #3
 80034aa:	f025 0503 	bic.w	r5, r5, #3
 80034ae:	3508      	adds	r5, #8
 80034b0:	2d0c      	cmp	r5, #12
 80034b2:	bf38      	it	cc
 80034b4:	250c      	movcc	r5, #12
 80034b6:	2d00      	cmp	r5, #0
 80034b8:	4607      	mov	r7, r0
 80034ba:	db01      	blt.n	80034c0 <_malloc_r+0x1c>
 80034bc:	42a9      	cmp	r1, r5
 80034be:	d905      	bls.n	80034cc <_malloc_r+0x28>
 80034c0:	230c      	movs	r3, #12
 80034c2:	2600      	movs	r6, #0
 80034c4:	603b      	str	r3, [r7, #0]
 80034c6:	4630      	mov	r0, r6
 80034c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80035a0 <_malloc_r+0xfc>
 80034d0:	f000 f868 	bl	80035a4 <__malloc_lock>
 80034d4:	f8d8 3000 	ldr.w	r3, [r8]
 80034d8:	461c      	mov	r4, r3
 80034da:	bb5c      	cbnz	r4, 8003534 <_malloc_r+0x90>
 80034dc:	4629      	mov	r1, r5
 80034de:	4638      	mov	r0, r7
 80034e0:	f7ff ffc0 	bl	8003464 <sbrk_aligned>
 80034e4:	1c43      	adds	r3, r0, #1
 80034e6:	4604      	mov	r4, r0
 80034e8:	d155      	bne.n	8003596 <_malloc_r+0xf2>
 80034ea:	f8d8 4000 	ldr.w	r4, [r8]
 80034ee:	4626      	mov	r6, r4
 80034f0:	2e00      	cmp	r6, #0
 80034f2:	d145      	bne.n	8003580 <_malloc_r+0xdc>
 80034f4:	2c00      	cmp	r4, #0
 80034f6:	d048      	beq.n	800358a <_malloc_r+0xe6>
 80034f8:	6823      	ldr	r3, [r4, #0]
 80034fa:	4631      	mov	r1, r6
 80034fc:	4638      	mov	r0, r7
 80034fe:	eb04 0903 	add.w	r9, r4, r3
 8003502:	f000 fc1d 	bl	8003d40 <_sbrk_r>
 8003506:	4581      	cmp	r9, r0
 8003508:	d13f      	bne.n	800358a <_malloc_r+0xe6>
 800350a:	6821      	ldr	r1, [r4, #0]
 800350c:	4638      	mov	r0, r7
 800350e:	1a6d      	subs	r5, r5, r1
 8003510:	4629      	mov	r1, r5
 8003512:	f7ff ffa7 	bl	8003464 <sbrk_aligned>
 8003516:	3001      	adds	r0, #1
 8003518:	d037      	beq.n	800358a <_malloc_r+0xe6>
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	442b      	add	r3, r5
 800351e:	6023      	str	r3, [r4, #0]
 8003520:	f8d8 3000 	ldr.w	r3, [r8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d038      	beq.n	800359a <_malloc_r+0xf6>
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	42a2      	cmp	r2, r4
 800352c:	d12b      	bne.n	8003586 <_malloc_r+0xe2>
 800352e:	2200      	movs	r2, #0
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	e00f      	b.n	8003554 <_malloc_r+0xb0>
 8003534:	6822      	ldr	r2, [r4, #0]
 8003536:	1b52      	subs	r2, r2, r5
 8003538:	d41f      	bmi.n	800357a <_malloc_r+0xd6>
 800353a:	2a0b      	cmp	r2, #11
 800353c:	d917      	bls.n	800356e <_malloc_r+0xca>
 800353e:	1961      	adds	r1, r4, r5
 8003540:	42a3      	cmp	r3, r4
 8003542:	6025      	str	r5, [r4, #0]
 8003544:	bf18      	it	ne
 8003546:	6059      	strne	r1, [r3, #4]
 8003548:	6863      	ldr	r3, [r4, #4]
 800354a:	bf08      	it	eq
 800354c:	f8c8 1000 	streq.w	r1, [r8]
 8003550:	5162      	str	r2, [r4, r5]
 8003552:	604b      	str	r3, [r1, #4]
 8003554:	4638      	mov	r0, r7
 8003556:	f104 060b 	add.w	r6, r4, #11
 800355a:	f000 f829 	bl	80035b0 <__malloc_unlock>
 800355e:	f026 0607 	bic.w	r6, r6, #7
 8003562:	1d23      	adds	r3, r4, #4
 8003564:	1af2      	subs	r2, r6, r3
 8003566:	d0ae      	beq.n	80034c6 <_malloc_r+0x22>
 8003568:	1b9b      	subs	r3, r3, r6
 800356a:	50a3      	str	r3, [r4, r2]
 800356c:	e7ab      	b.n	80034c6 <_malloc_r+0x22>
 800356e:	42a3      	cmp	r3, r4
 8003570:	6862      	ldr	r2, [r4, #4]
 8003572:	d1dd      	bne.n	8003530 <_malloc_r+0x8c>
 8003574:	f8c8 2000 	str.w	r2, [r8]
 8003578:	e7ec      	b.n	8003554 <_malloc_r+0xb0>
 800357a:	4623      	mov	r3, r4
 800357c:	6864      	ldr	r4, [r4, #4]
 800357e:	e7ac      	b.n	80034da <_malloc_r+0x36>
 8003580:	4634      	mov	r4, r6
 8003582:	6876      	ldr	r6, [r6, #4]
 8003584:	e7b4      	b.n	80034f0 <_malloc_r+0x4c>
 8003586:	4613      	mov	r3, r2
 8003588:	e7cc      	b.n	8003524 <_malloc_r+0x80>
 800358a:	230c      	movs	r3, #12
 800358c:	4638      	mov	r0, r7
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	f000 f80e 	bl	80035b0 <__malloc_unlock>
 8003594:	e797      	b.n	80034c6 <_malloc_r+0x22>
 8003596:	6025      	str	r5, [r4, #0]
 8003598:	e7dc      	b.n	8003554 <_malloc_r+0xb0>
 800359a:	605b      	str	r3, [r3, #4]
 800359c:	deff      	udf	#255	; 0xff
 800359e:	bf00      	nop
 80035a0:	20000294 	.word	0x20000294

080035a4 <__malloc_lock>:
 80035a4:	4801      	ldr	r0, [pc, #4]	; (80035ac <__malloc_lock+0x8>)
 80035a6:	f7ff beed 	b.w	8003384 <__retarget_lock_acquire_recursive>
 80035aa:	bf00      	nop
 80035ac:	20000290 	.word	0x20000290

080035b0 <__malloc_unlock>:
 80035b0:	4801      	ldr	r0, [pc, #4]	; (80035b8 <__malloc_unlock+0x8>)
 80035b2:	f7ff bee8 	b.w	8003386 <__retarget_lock_release_recursive>
 80035b6:	bf00      	nop
 80035b8:	20000290 	.word	0x20000290

080035bc <__ssputs_r>:
 80035bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035c0:	461f      	mov	r7, r3
 80035c2:	688e      	ldr	r6, [r1, #8]
 80035c4:	4682      	mov	sl, r0
 80035c6:	42be      	cmp	r6, r7
 80035c8:	460c      	mov	r4, r1
 80035ca:	4690      	mov	r8, r2
 80035cc:	680b      	ldr	r3, [r1, #0]
 80035ce:	d82c      	bhi.n	800362a <__ssputs_r+0x6e>
 80035d0:	898a      	ldrh	r2, [r1, #12]
 80035d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035d6:	d026      	beq.n	8003626 <__ssputs_r+0x6a>
 80035d8:	6965      	ldr	r5, [r4, #20]
 80035da:	6909      	ldr	r1, [r1, #16]
 80035dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035e0:	eba3 0901 	sub.w	r9, r3, r1
 80035e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035e8:	1c7b      	adds	r3, r7, #1
 80035ea:	444b      	add	r3, r9
 80035ec:	106d      	asrs	r5, r5, #1
 80035ee:	429d      	cmp	r5, r3
 80035f0:	bf38      	it	cc
 80035f2:	461d      	movcc	r5, r3
 80035f4:	0553      	lsls	r3, r2, #21
 80035f6:	d527      	bpl.n	8003648 <__ssputs_r+0x8c>
 80035f8:	4629      	mov	r1, r5
 80035fa:	f7ff ff53 	bl	80034a4 <_malloc_r>
 80035fe:	4606      	mov	r6, r0
 8003600:	b360      	cbz	r0, 800365c <__ssputs_r+0xa0>
 8003602:	464a      	mov	r2, r9
 8003604:	6921      	ldr	r1, [r4, #16]
 8003606:	f000 fbb9 	bl	8003d7c <memcpy>
 800360a:	89a3      	ldrh	r3, [r4, #12]
 800360c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003614:	81a3      	strh	r3, [r4, #12]
 8003616:	6126      	str	r6, [r4, #16]
 8003618:	444e      	add	r6, r9
 800361a:	6026      	str	r6, [r4, #0]
 800361c:	463e      	mov	r6, r7
 800361e:	6165      	str	r5, [r4, #20]
 8003620:	eba5 0509 	sub.w	r5, r5, r9
 8003624:	60a5      	str	r5, [r4, #8]
 8003626:	42be      	cmp	r6, r7
 8003628:	d900      	bls.n	800362c <__ssputs_r+0x70>
 800362a:	463e      	mov	r6, r7
 800362c:	4632      	mov	r2, r6
 800362e:	4641      	mov	r1, r8
 8003630:	6820      	ldr	r0, [r4, #0]
 8003632:	f000 fb6b 	bl	8003d0c <memmove>
 8003636:	2000      	movs	r0, #0
 8003638:	68a3      	ldr	r3, [r4, #8]
 800363a:	1b9b      	subs	r3, r3, r6
 800363c:	60a3      	str	r3, [r4, #8]
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	4433      	add	r3, r6
 8003642:	6023      	str	r3, [r4, #0]
 8003644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003648:	462a      	mov	r2, r5
 800364a:	f000 fbac 	bl	8003da6 <_realloc_r>
 800364e:	4606      	mov	r6, r0
 8003650:	2800      	cmp	r0, #0
 8003652:	d1e0      	bne.n	8003616 <__ssputs_r+0x5a>
 8003654:	4650      	mov	r0, sl
 8003656:	6921      	ldr	r1, [r4, #16]
 8003658:	f7ff feb4 	bl	80033c4 <_free_r>
 800365c:	230c      	movs	r3, #12
 800365e:	f8ca 3000 	str.w	r3, [sl]
 8003662:	89a3      	ldrh	r3, [r4, #12]
 8003664:	f04f 30ff 	mov.w	r0, #4294967295
 8003668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800366c:	81a3      	strh	r3, [r4, #12]
 800366e:	e7e9      	b.n	8003644 <__ssputs_r+0x88>

08003670 <_svfiprintf_r>:
 8003670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003674:	4698      	mov	r8, r3
 8003676:	898b      	ldrh	r3, [r1, #12]
 8003678:	4607      	mov	r7, r0
 800367a:	061b      	lsls	r3, r3, #24
 800367c:	460d      	mov	r5, r1
 800367e:	4614      	mov	r4, r2
 8003680:	b09d      	sub	sp, #116	; 0x74
 8003682:	d50e      	bpl.n	80036a2 <_svfiprintf_r+0x32>
 8003684:	690b      	ldr	r3, [r1, #16]
 8003686:	b963      	cbnz	r3, 80036a2 <_svfiprintf_r+0x32>
 8003688:	2140      	movs	r1, #64	; 0x40
 800368a:	f7ff ff0b 	bl	80034a4 <_malloc_r>
 800368e:	6028      	str	r0, [r5, #0]
 8003690:	6128      	str	r0, [r5, #16]
 8003692:	b920      	cbnz	r0, 800369e <_svfiprintf_r+0x2e>
 8003694:	230c      	movs	r3, #12
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	f04f 30ff 	mov.w	r0, #4294967295
 800369c:	e0d0      	b.n	8003840 <_svfiprintf_r+0x1d0>
 800369e:	2340      	movs	r3, #64	; 0x40
 80036a0:	616b      	str	r3, [r5, #20]
 80036a2:	2300      	movs	r3, #0
 80036a4:	9309      	str	r3, [sp, #36]	; 0x24
 80036a6:	2320      	movs	r3, #32
 80036a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036ac:	2330      	movs	r3, #48	; 0x30
 80036ae:	f04f 0901 	mov.w	r9, #1
 80036b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80036b6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003858 <_svfiprintf_r+0x1e8>
 80036ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036be:	4623      	mov	r3, r4
 80036c0:	469a      	mov	sl, r3
 80036c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036c6:	b10a      	cbz	r2, 80036cc <_svfiprintf_r+0x5c>
 80036c8:	2a25      	cmp	r2, #37	; 0x25
 80036ca:	d1f9      	bne.n	80036c0 <_svfiprintf_r+0x50>
 80036cc:	ebba 0b04 	subs.w	fp, sl, r4
 80036d0:	d00b      	beq.n	80036ea <_svfiprintf_r+0x7a>
 80036d2:	465b      	mov	r3, fp
 80036d4:	4622      	mov	r2, r4
 80036d6:	4629      	mov	r1, r5
 80036d8:	4638      	mov	r0, r7
 80036da:	f7ff ff6f 	bl	80035bc <__ssputs_r>
 80036de:	3001      	adds	r0, #1
 80036e0:	f000 80a9 	beq.w	8003836 <_svfiprintf_r+0x1c6>
 80036e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036e6:	445a      	add	r2, fp
 80036e8:	9209      	str	r2, [sp, #36]	; 0x24
 80036ea:	f89a 3000 	ldrb.w	r3, [sl]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 80a1 	beq.w	8003836 <_svfiprintf_r+0x1c6>
 80036f4:	2300      	movs	r3, #0
 80036f6:	f04f 32ff 	mov.w	r2, #4294967295
 80036fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036fe:	f10a 0a01 	add.w	sl, sl, #1
 8003702:	9304      	str	r3, [sp, #16]
 8003704:	9307      	str	r3, [sp, #28]
 8003706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800370a:	931a      	str	r3, [sp, #104]	; 0x68
 800370c:	4654      	mov	r4, sl
 800370e:	2205      	movs	r2, #5
 8003710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003714:	4850      	ldr	r0, [pc, #320]	; (8003858 <_svfiprintf_r+0x1e8>)
 8003716:	f000 fb23 	bl	8003d60 <memchr>
 800371a:	9a04      	ldr	r2, [sp, #16]
 800371c:	b9d8      	cbnz	r0, 8003756 <_svfiprintf_r+0xe6>
 800371e:	06d0      	lsls	r0, r2, #27
 8003720:	bf44      	itt	mi
 8003722:	2320      	movmi	r3, #32
 8003724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003728:	0711      	lsls	r1, r2, #28
 800372a:	bf44      	itt	mi
 800372c:	232b      	movmi	r3, #43	; 0x2b
 800372e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003732:	f89a 3000 	ldrb.w	r3, [sl]
 8003736:	2b2a      	cmp	r3, #42	; 0x2a
 8003738:	d015      	beq.n	8003766 <_svfiprintf_r+0xf6>
 800373a:	4654      	mov	r4, sl
 800373c:	2000      	movs	r0, #0
 800373e:	f04f 0c0a 	mov.w	ip, #10
 8003742:	9a07      	ldr	r2, [sp, #28]
 8003744:	4621      	mov	r1, r4
 8003746:	f811 3b01 	ldrb.w	r3, [r1], #1
 800374a:	3b30      	subs	r3, #48	; 0x30
 800374c:	2b09      	cmp	r3, #9
 800374e:	d94d      	bls.n	80037ec <_svfiprintf_r+0x17c>
 8003750:	b1b0      	cbz	r0, 8003780 <_svfiprintf_r+0x110>
 8003752:	9207      	str	r2, [sp, #28]
 8003754:	e014      	b.n	8003780 <_svfiprintf_r+0x110>
 8003756:	eba0 0308 	sub.w	r3, r0, r8
 800375a:	fa09 f303 	lsl.w	r3, r9, r3
 800375e:	4313      	orrs	r3, r2
 8003760:	46a2      	mov	sl, r4
 8003762:	9304      	str	r3, [sp, #16]
 8003764:	e7d2      	b.n	800370c <_svfiprintf_r+0x9c>
 8003766:	9b03      	ldr	r3, [sp, #12]
 8003768:	1d19      	adds	r1, r3, #4
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	9103      	str	r1, [sp, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	bfbb      	ittet	lt
 8003772:	425b      	neglt	r3, r3
 8003774:	f042 0202 	orrlt.w	r2, r2, #2
 8003778:	9307      	strge	r3, [sp, #28]
 800377a:	9307      	strlt	r3, [sp, #28]
 800377c:	bfb8      	it	lt
 800377e:	9204      	strlt	r2, [sp, #16]
 8003780:	7823      	ldrb	r3, [r4, #0]
 8003782:	2b2e      	cmp	r3, #46	; 0x2e
 8003784:	d10c      	bne.n	80037a0 <_svfiprintf_r+0x130>
 8003786:	7863      	ldrb	r3, [r4, #1]
 8003788:	2b2a      	cmp	r3, #42	; 0x2a
 800378a:	d134      	bne.n	80037f6 <_svfiprintf_r+0x186>
 800378c:	9b03      	ldr	r3, [sp, #12]
 800378e:	3402      	adds	r4, #2
 8003790:	1d1a      	adds	r2, r3, #4
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	9203      	str	r2, [sp, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	bfb8      	it	lt
 800379a:	f04f 33ff 	movlt.w	r3, #4294967295
 800379e:	9305      	str	r3, [sp, #20]
 80037a0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800385c <_svfiprintf_r+0x1ec>
 80037a4:	2203      	movs	r2, #3
 80037a6:	4650      	mov	r0, sl
 80037a8:	7821      	ldrb	r1, [r4, #0]
 80037aa:	f000 fad9 	bl	8003d60 <memchr>
 80037ae:	b138      	cbz	r0, 80037c0 <_svfiprintf_r+0x150>
 80037b0:	2240      	movs	r2, #64	; 0x40
 80037b2:	9b04      	ldr	r3, [sp, #16]
 80037b4:	eba0 000a 	sub.w	r0, r0, sl
 80037b8:	4082      	lsls	r2, r0
 80037ba:	4313      	orrs	r3, r2
 80037bc:	3401      	adds	r4, #1
 80037be:	9304      	str	r3, [sp, #16]
 80037c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037c4:	2206      	movs	r2, #6
 80037c6:	4826      	ldr	r0, [pc, #152]	; (8003860 <_svfiprintf_r+0x1f0>)
 80037c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037cc:	f000 fac8 	bl	8003d60 <memchr>
 80037d0:	2800      	cmp	r0, #0
 80037d2:	d038      	beq.n	8003846 <_svfiprintf_r+0x1d6>
 80037d4:	4b23      	ldr	r3, [pc, #140]	; (8003864 <_svfiprintf_r+0x1f4>)
 80037d6:	bb1b      	cbnz	r3, 8003820 <_svfiprintf_r+0x1b0>
 80037d8:	9b03      	ldr	r3, [sp, #12]
 80037da:	3307      	adds	r3, #7
 80037dc:	f023 0307 	bic.w	r3, r3, #7
 80037e0:	3308      	adds	r3, #8
 80037e2:	9303      	str	r3, [sp, #12]
 80037e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037e6:	4433      	add	r3, r6
 80037e8:	9309      	str	r3, [sp, #36]	; 0x24
 80037ea:	e768      	b.n	80036be <_svfiprintf_r+0x4e>
 80037ec:	460c      	mov	r4, r1
 80037ee:	2001      	movs	r0, #1
 80037f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80037f4:	e7a6      	b.n	8003744 <_svfiprintf_r+0xd4>
 80037f6:	2300      	movs	r3, #0
 80037f8:	f04f 0c0a 	mov.w	ip, #10
 80037fc:	4619      	mov	r1, r3
 80037fe:	3401      	adds	r4, #1
 8003800:	9305      	str	r3, [sp, #20]
 8003802:	4620      	mov	r0, r4
 8003804:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003808:	3a30      	subs	r2, #48	; 0x30
 800380a:	2a09      	cmp	r2, #9
 800380c:	d903      	bls.n	8003816 <_svfiprintf_r+0x1a6>
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0c6      	beq.n	80037a0 <_svfiprintf_r+0x130>
 8003812:	9105      	str	r1, [sp, #20]
 8003814:	e7c4      	b.n	80037a0 <_svfiprintf_r+0x130>
 8003816:	4604      	mov	r4, r0
 8003818:	2301      	movs	r3, #1
 800381a:	fb0c 2101 	mla	r1, ip, r1, r2
 800381e:	e7f0      	b.n	8003802 <_svfiprintf_r+0x192>
 8003820:	ab03      	add	r3, sp, #12
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	462a      	mov	r2, r5
 8003826:	4638      	mov	r0, r7
 8003828:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <_svfiprintf_r+0x1f8>)
 800382a:	a904      	add	r1, sp, #16
 800382c:	f3af 8000 	nop.w
 8003830:	1c42      	adds	r2, r0, #1
 8003832:	4606      	mov	r6, r0
 8003834:	d1d6      	bne.n	80037e4 <_svfiprintf_r+0x174>
 8003836:	89ab      	ldrh	r3, [r5, #12]
 8003838:	065b      	lsls	r3, r3, #25
 800383a:	f53f af2d 	bmi.w	8003698 <_svfiprintf_r+0x28>
 800383e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003840:	b01d      	add	sp, #116	; 0x74
 8003842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003846:	ab03      	add	r3, sp, #12
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	462a      	mov	r2, r5
 800384c:	4638      	mov	r0, r7
 800384e:	4b06      	ldr	r3, [pc, #24]	; (8003868 <_svfiprintf_r+0x1f8>)
 8003850:	a904      	add	r1, sp, #16
 8003852:	f000 f87d 	bl	8003950 <_printf_i>
 8003856:	e7eb      	b.n	8003830 <_svfiprintf_r+0x1c0>
 8003858:	08004449 	.word	0x08004449
 800385c:	0800444f 	.word	0x0800444f
 8003860:	08004453 	.word	0x08004453
 8003864:	00000000 	.word	0x00000000
 8003868:	080035bd 	.word	0x080035bd

0800386c <_printf_common>:
 800386c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003870:	4616      	mov	r6, r2
 8003872:	4699      	mov	r9, r3
 8003874:	688a      	ldr	r2, [r1, #8]
 8003876:	690b      	ldr	r3, [r1, #16]
 8003878:	4607      	mov	r7, r0
 800387a:	4293      	cmp	r3, r2
 800387c:	bfb8      	it	lt
 800387e:	4613      	movlt	r3, r2
 8003880:	6033      	str	r3, [r6, #0]
 8003882:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003886:	460c      	mov	r4, r1
 8003888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800388c:	b10a      	cbz	r2, 8003892 <_printf_common+0x26>
 800388e:	3301      	adds	r3, #1
 8003890:	6033      	str	r3, [r6, #0]
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	0699      	lsls	r1, r3, #26
 8003896:	bf42      	ittt	mi
 8003898:	6833      	ldrmi	r3, [r6, #0]
 800389a:	3302      	addmi	r3, #2
 800389c:	6033      	strmi	r3, [r6, #0]
 800389e:	6825      	ldr	r5, [r4, #0]
 80038a0:	f015 0506 	ands.w	r5, r5, #6
 80038a4:	d106      	bne.n	80038b4 <_printf_common+0x48>
 80038a6:	f104 0a19 	add.w	sl, r4, #25
 80038aa:	68e3      	ldr	r3, [r4, #12]
 80038ac:	6832      	ldr	r2, [r6, #0]
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	42ab      	cmp	r3, r5
 80038b2:	dc2b      	bgt.n	800390c <_printf_common+0xa0>
 80038b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038b8:	1e13      	subs	r3, r2, #0
 80038ba:	6822      	ldr	r2, [r4, #0]
 80038bc:	bf18      	it	ne
 80038be:	2301      	movne	r3, #1
 80038c0:	0692      	lsls	r2, r2, #26
 80038c2:	d430      	bmi.n	8003926 <_printf_common+0xba>
 80038c4:	4649      	mov	r1, r9
 80038c6:	4638      	mov	r0, r7
 80038c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038cc:	47c0      	blx	r8
 80038ce:	3001      	adds	r0, #1
 80038d0:	d023      	beq.n	800391a <_printf_common+0xae>
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	6922      	ldr	r2, [r4, #16]
 80038d6:	f003 0306 	and.w	r3, r3, #6
 80038da:	2b04      	cmp	r3, #4
 80038dc:	bf14      	ite	ne
 80038de:	2500      	movne	r5, #0
 80038e0:	6833      	ldreq	r3, [r6, #0]
 80038e2:	f04f 0600 	mov.w	r6, #0
 80038e6:	bf08      	it	eq
 80038e8:	68e5      	ldreq	r5, [r4, #12]
 80038ea:	f104 041a 	add.w	r4, r4, #26
 80038ee:	bf08      	it	eq
 80038f0:	1aed      	subeq	r5, r5, r3
 80038f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80038f6:	bf08      	it	eq
 80038f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038fc:	4293      	cmp	r3, r2
 80038fe:	bfc4      	itt	gt
 8003900:	1a9b      	subgt	r3, r3, r2
 8003902:	18ed      	addgt	r5, r5, r3
 8003904:	42b5      	cmp	r5, r6
 8003906:	d11a      	bne.n	800393e <_printf_common+0xd2>
 8003908:	2000      	movs	r0, #0
 800390a:	e008      	b.n	800391e <_printf_common+0xb2>
 800390c:	2301      	movs	r3, #1
 800390e:	4652      	mov	r2, sl
 8003910:	4649      	mov	r1, r9
 8003912:	4638      	mov	r0, r7
 8003914:	47c0      	blx	r8
 8003916:	3001      	adds	r0, #1
 8003918:	d103      	bne.n	8003922 <_printf_common+0xb6>
 800391a:	f04f 30ff 	mov.w	r0, #4294967295
 800391e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003922:	3501      	adds	r5, #1
 8003924:	e7c1      	b.n	80038aa <_printf_common+0x3e>
 8003926:	2030      	movs	r0, #48	; 0x30
 8003928:	18e1      	adds	r1, r4, r3
 800392a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003934:	4422      	add	r2, r4
 8003936:	3302      	adds	r3, #2
 8003938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800393c:	e7c2      	b.n	80038c4 <_printf_common+0x58>
 800393e:	2301      	movs	r3, #1
 8003940:	4622      	mov	r2, r4
 8003942:	4649      	mov	r1, r9
 8003944:	4638      	mov	r0, r7
 8003946:	47c0      	blx	r8
 8003948:	3001      	adds	r0, #1
 800394a:	d0e6      	beq.n	800391a <_printf_common+0xae>
 800394c:	3601      	adds	r6, #1
 800394e:	e7d9      	b.n	8003904 <_printf_common+0x98>

08003950 <_printf_i>:
 8003950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003954:	7e0f      	ldrb	r7, [r1, #24]
 8003956:	4691      	mov	r9, r2
 8003958:	2f78      	cmp	r7, #120	; 0x78
 800395a:	4680      	mov	r8, r0
 800395c:	460c      	mov	r4, r1
 800395e:	469a      	mov	sl, r3
 8003960:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003962:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003966:	d807      	bhi.n	8003978 <_printf_i+0x28>
 8003968:	2f62      	cmp	r7, #98	; 0x62
 800396a:	d80a      	bhi.n	8003982 <_printf_i+0x32>
 800396c:	2f00      	cmp	r7, #0
 800396e:	f000 80d5 	beq.w	8003b1c <_printf_i+0x1cc>
 8003972:	2f58      	cmp	r7, #88	; 0x58
 8003974:	f000 80c1 	beq.w	8003afa <_printf_i+0x1aa>
 8003978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800397c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003980:	e03a      	b.n	80039f8 <_printf_i+0xa8>
 8003982:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003986:	2b15      	cmp	r3, #21
 8003988:	d8f6      	bhi.n	8003978 <_printf_i+0x28>
 800398a:	a101      	add	r1, pc, #4	; (adr r1, 8003990 <_printf_i+0x40>)
 800398c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003990:	080039e9 	.word	0x080039e9
 8003994:	080039fd 	.word	0x080039fd
 8003998:	08003979 	.word	0x08003979
 800399c:	08003979 	.word	0x08003979
 80039a0:	08003979 	.word	0x08003979
 80039a4:	08003979 	.word	0x08003979
 80039a8:	080039fd 	.word	0x080039fd
 80039ac:	08003979 	.word	0x08003979
 80039b0:	08003979 	.word	0x08003979
 80039b4:	08003979 	.word	0x08003979
 80039b8:	08003979 	.word	0x08003979
 80039bc:	08003b03 	.word	0x08003b03
 80039c0:	08003a29 	.word	0x08003a29
 80039c4:	08003abd 	.word	0x08003abd
 80039c8:	08003979 	.word	0x08003979
 80039cc:	08003979 	.word	0x08003979
 80039d0:	08003b25 	.word	0x08003b25
 80039d4:	08003979 	.word	0x08003979
 80039d8:	08003a29 	.word	0x08003a29
 80039dc:	08003979 	.word	0x08003979
 80039e0:	08003979 	.word	0x08003979
 80039e4:	08003ac5 	.word	0x08003ac5
 80039e8:	682b      	ldr	r3, [r5, #0]
 80039ea:	1d1a      	adds	r2, r3, #4
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	602a      	str	r2, [r5, #0]
 80039f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0a0      	b.n	8003b3e <_printf_i+0x1ee>
 80039fc:	6820      	ldr	r0, [r4, #0]
 80039fe:	682b      	ldr	r3, [r5, #0]
 8003a00:	0607      	lsls	r7, r0, #24
 8003a02:	f103 0104 	add.w	r1, r3, #4
 8003a06:	6029      	str	r1, [r5, #0]
 8003a08:	d501      	bpl.n	8003a0e <_printf_i+0xbe>
 8003a0a:	681e      	ldr	r6, [r3, #0]
 8003a0c:	e003      	b.n	8003a16 <_printf_i+0xc6>
 8003a0e:	0646      	lsls	r6, r0, #25
 8003a10:	d5fb      	bpl.n	8003a0a <_printf_i+0xba>
 8003a12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003a16:	2e00      	cmp	r6, #0
 8003a18:	da03      	bge.n	8003a22 <_printf_i+0xd2>
 8003a1a:	232d      	movs	r3, #45	; 0x2d
 8003a1c:	4276      	negs	r6, r6
 8003a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a22:	230a      	movs	r3, #10
 8003a24:	4859      	ldr	r0, [pc, #356]	; (8003b8c <_printf_i+0x23c>)
 8003a26:	e012      	b.n	8003a4e <_printf_i+0xfe>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	6820      	ldr	r0, [r4, #0]
 8003a2c:	1d19      	adds	r1, r3, #4
 8003a2e:	6029      	str	r1, [r5, #0]
 8003a30:	0605      	lsls	r5, r0, #24
 8003a32:	d501      	bpl.n	8003a38 <_printf_i+0xe8>
 8003a34:	681e      	ldr	r6, [r3, #0]
 8003a36:	e002      	b.n	8003a3e <_printf_i+0xee>
 8003a38:	0641      	lsls	r1, r0, #25
 8003a3a:	d5fb      	bpl.n	8003a34 <_printf_i+0xe4>
 8003a3c:	881e      	ldrh	r6, [r3, #0]
 8003a3e:	2f6f      	cmp	r7, #111	; 0x6f
 8003a40:	bf0c      	ite	eq
 8003a42:	2308      	moveq	r3, #8
 8003a44:	230a      	movne	r3, #10
 8003a46:	4851      	ldr	r0, [pc, #324]	; (8003b8c <_printf_i+0x23c>)
 8003a48:	2100      	movs	r1, #0
 8003a4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a4e:	6865      	ldr	r5, [r4, #4]
 8003a50:	2d00      	cmp	r5, #0
 8003a52:	bfa8      	it	ge
 8003a54:	6821      	ldrge	r1, [r4, #0]
 8003a56:	60a5      	str	r5, [r4, #8]
 8003a58:	bfa4      	itt	ge
 8003a5a:	f021 0104 	bicge.w	r1, r1, #4
 8003a5e:	6021      	strge	r1, [r4, #0]
 8003a60:	b90e      	cbnz	r6, 8003a66 <_printf_i+0x116>
 8003a62:	2d00      	cmp	r5, #0
 8003a64:	d04b      	beq.n	8003afe <_printf_i+0x1ae>
 8003a66:	4615      	mov	r5, r2
 8003a68:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a6c:	fb03 6711 	mls	r7, r3, r1, r6
 8003a70:	5dc7      	ldrb	r7, [r0, r7]
 8003a72:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a76:	4637      	mov	r7, r6
 8003a78:	42bb      	cmp	r3, r7
 8003a7a:	460e      	mov	r6, r1
 8003a7c:	d9f4      	bls.n	8003a68 <_printf_i+0x118>
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d10b      	bne.n	8003a9a <_printf_i+0x14a>
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	07de      	lsls	r6, r3, #31
 8003a86:	d508      	bpl.n	8003a9a <_printf_i+0x14a>
 8003a88:	6923      	ldr	r3, [r4, #16]
 8003a8a:	6861      	ldr	r1, [r4, #4]
 8003a8c:	4299      	cmp	r1, r3
 8003a8e:	bfde      	ittt	le
 8003a90:	2330      	movle	r3, #48	; 0x30
 8003a92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a9a:	1b52      	subs	r2, r2, r5
 8003a9c:	6122      	str	r2, [r4, #16]
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	4640      	mov	r0, r8
 8003aa4:	f8cd a000 	str.w	sl, [sp]
 8003aa8:	aa03      	add	r2, sp, #12
 8003aaa:	f7ff fedf 	bl	800386c <_printf_common>
 8003aae:	3001      	adds	r0, #1
 8003ab0:	d14a      	bne.n	8003b48 <_printf_i+0x1f8>
 8003ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab6:	b004      	add	sp, #16
 8003ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	f043 0320 	orr.w	r3, r3, #32
 8003ac2:	6023      	str	r3, [r4, #0]
 8003ac4:	2778      	movs	r7, #120	; 0x78
 8003ac6:	4832      	ldr	r0, [pc, #200]	; (8003b90 <_printf_i+0x240>)
 8003ac8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	6829      	ldr	r1, [r5, #0]
 8003ad0:	061f      	lsls	r7, r3, #24
 8003ad2:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ad6:	d402      	bmi.n	8003ade <_printf_i+0x18e>
 8003ad8:	065f      	lsls	r7, r3, #25
 8003ada:	bf48      	it	mi
 8003adc:	b2b6      	uxthmi	r6, r6
 8003ade:	07df      	lsls	r7, r3, #31
 8003ae0:	bf48      	it	mi
 8003ae2:	f043 0320 	orrmi.w	r3, r3, #32
 8003ae6:	6029      	str	r1, [r5, #0]
 8003ae8:	bf48      	it	mi
 8003aea:	6023      	strmi	r3, [r4, #0]
 8003aec:	b91e      	cbnz	r6, 8003af6 <_printf_i+0x1a6>
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	f023 0320 	bic.w	r3, r3, #32
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	2310      	movs	r3, #16
 8003af8:	e7a6      	b.n	8003a48 <_printf_i+0xf8>
 8003afa:	4824      	ldr	r0, [pc, #144]	; (8003b8c <_printf_i+0x23c>)
 8003afc:	e7e4      	b.n	8003ac8 <_printf_i+0x178>
 8003afe:	4615      	mov	r5, r2
 8003b00:	e7bd      	b.n	8003a7e <_printf_i+0x12e>
 8003b02:	682b      	ldr	r3, [r5, #0]
 8003b04:	6826      	ldr	r6, [r4, #0]
 8003b06:	1d18      	adds	r0, r3, #4
 8003b08:	6961      	ldr	r1, [r4, #20]
 8003b0a:	6028      	str	r0, [r5, #0]
 8003b0c:	0635      	lsls	r5, r6, #24
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	d501      	bpl.n	8003b16 <_printf_i+0x1c6>
 8003b12:	6019      	str	r1, [r3, #0]
 8003b14:	e002      	b.n	8003b1c <_printf_i+0x1cc>
 8003b16:	0670      	lsls	r0, r6, #25
 8003b18:	d5fb      	bpl.n	8003b12 <_printf_i+0x1c2>
 8003b1a:	8019      	strh	r1, [r3, #0]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	4615      	mov	r5, r2
 8003b20:	6123      	str	r3, [r4, #16]
 8003b22:	e7bc      	b.n	8003a9e <_printf_i+0x14e>
 8003b24:	682b      	ldr	r3, [r5, #0]
 8003b26:	2100      	movs	r1, #0
 8003b28:	1d1a      	adds	r2, r3, #4
 8003b2a:	602a      	str	r2, [r5, #0]
 8003b2c:	681d      	ldr	r5, [r3, #0]
 8003b2e:	6862      	ldr	r2, [r4, #4]
 8003b30:	4628      	mov	r0, r5
 8003b32:	f000 f915 	bl	8003d60 <memchr>
 8003b36:	b108      	cbz	r0, 8003b3c <_printf_i+0x1ec>
 8003b38:	1b40      	subs	r0, r0, r5
 8003b3a:	6060      	str	r0, [r4, #4]
 8003b3c:	6863      	ldr	r3, [r4, #4]
 8003b3e:	6123      	str	r3, [r4, #16]
 8003b40:	2300      	movs	r3, #0
 8003b42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b46:	e7aa      	b.n	8003a9e <_printf_i+0x14e>
 8003b48:	462a      	mov	r2, r5
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	4640      	mov	r0, r8
 8003b4e:	6923      	ldr	r3, [r4, #16]
 8003b50:	47d0      	blx	sl
 8003b52:	3001      	adds	r0, #1
 8003b54:	d0ad      	beq.n	8003ab2 <_printf_i+0x162>
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	079b      	lsls	r3, r3, #30
 8003b5a:	d413      	bmi.n	8003b84 <_printf_i+0x234>
 8003b5c:	68e0      	ldr	r0, [r4, #12]
 8003b5e:	9b03      	ldr	r3, [sp, #12]
 8003b60:	4298      	cmp	r0, r3
 8003b62:	bfb8      	it	lt
 8003b64:	4618      	movlt	r0, r3
 8003b66:	e7a6      	b.n	8003ab6 <_printf_i+0x166>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	4632      	mov	r2, r6
 8003b6c:	4649      	mov	r1, r9
 8003b6e:	4640      	mov	r0, r8
 8003b70:	47d0      	blx	sl
 8003b72:	3001      	adds	r0, #1
 8003b74:	d09d      	beq.n	8003ab2 <_printf_i+0x162>
 8003b76:	3501      	adds	r5, #1
 8003b78:	68e3      	ldr	r3, [r4, #12]
 8003b7a:	9903      	ldr	r1, [sp, #12]
 8003b7c:	1a5b      	subs	r3, r3, r1
 8003b7e:	42ab      	cmp	r3, r5
 8003b80:	dcf2      	bgt.n	8003b68 <_printf_i+0x218>
 8003b82:	e7eb      	b.n	8003b5c <_printf_i+0x20c>
 8003b84:	2500      	movs	r5, #0
 8003b86:	f104 0619 	add.w	r6, r4, #25
 8003b8a:	e7f5      	b.n	8003b78 <_printf_i+0x228>
 8003b8c:	0800445a 	.word	0x0800445a
 8003b90:	0800446b 	.word	0x0800446b

08003b94 <__sflush_r>:
 8003b94:	898a      	ldrh	r2, [r1, #12]
 8003b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b98:	4605      	mov	r5, r0
 8003b9a:	0710      	lsls	r0, r2, #28
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	d457      	bmi.n	8003c50 <__sflush_r+0xbc>
 8003ba0:	684b      	ldr	r3, [r1, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	dc04      	bgt.n	8003bb0 <__sflush_r+0x1c>
 8003ba6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	dc01      	bgt.n	8003bb0 <__sflush_r+0x1c>
 8003bac:	2000      	movs	r0, #0
 8003bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bb2:	2e00      	cmp	r6, #0
 8003bb4:	d0fa      	beq.n	8003bac <__sflush_r+0x18>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003bbc:	682f      	ldr	r7, [r5, #0]
 8003bbe:	6a21      	ldr	r1, [r4, #32]
 8003bc0:	602b      	str	r3, [r5, #0]
 8003bc2:	d032      	beq.n	8003c2a <__sflush_r+0x96>
 8003bc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bc6:	89a3      	ldrh	r3, [r4, #12]
 8003bc8:	075a      	lsls	r2, r3, #29
 8003bca:	d505      	bpl.n	8003bd8 <__sflush_r+0x44>
 8003bcc:	6863      	ldr	r3, [r4, #4]
 8003bce:	1ac0      	subs	r0, r0, r3
 8003bd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bd2:	b10b      	cbz	r3, 8003bd8 <__sflush_r+0x44>
 8003bd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bd6:	1ac0      	subs	r0, r0, r3
 8003bd8:	2300      	movs	r3, #0
 8003bda:	4602      	mov	r2, r0
 8003bdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bde:	4628      	mov	r0, r5
 8003be0:	6a21      	ldr	r1, [r4, #32]
 8003be2:	47b0      	blx	r6
 8003be4:	1c43      	adds	r3, r0, #1
 8003be6:	89a3      	ldrh	r3, [r4, #12]
 8003be8:	d106      	bne.n	8003bf8 <__sflush_r+0x64>
 8003bea:	6829      	ldr	r1, [r5, #0]
 8003bec:	291d      	cmp	r1, #29
 8003bee:	d82b      	bhi.n	8003c48 <__sflush_r+0xb4>
 8003bf0:	4a28      	ldr	r2, [pc, #160]	; (8003c94 <__sflush_r+0x100>)
 8003bf2:	410a      	asrs	r2, r1
 8003bf4:	07d6      	lsls	r6, r2, #31
 8003bf6:	d427      	bmi.n	8003c48 <__sflush_r+0xb4>
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	6062      	str	r2, [r4, #4]
 8003bfc:	6922      	ldr	r2, [r4, #16]
 8003bfe:	04d9      	lsls	r1, r3, #19
 8003c00:	6022      	str	r2, [r4, #0]
 8003c02:	d504      	bpl.n	8003c0e <__sflush_r+0x7a>
 8003c04:	1c42      	adds	r2, r0, #1
 8003c06:	d101      	bne.n	8003c0c <__sflush_r+0x78>
 8003c08:	682b      	ldr	r3, [r5, #0]
 8003c0a:	b903      	cbnz	r3, 8003c0e <__sflush_r+0x7a>
 8003c0c:	6560      	str	r0, [r4, #84]	; 0x54
 8003c0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c10:	602f      	str	r7, [r5, #0]
 8003c12:	2900      	cmp	r1, #0
 8003c14:	d0ca      	beq.n	8003bac <__sflush_r+0x18>
 8003c16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c1a:	4299      	cmp	r1, r3
 8003c1c:	d002      	beq.n	8003c24 <__sflush_r+0x90>
 8003c1e:	4628      	mov	r0, r5
 8003c20:	f7ff fbd0 	bl	80033c4 <_free_r>
 8003c24:	2000      	movs	r0, #0
 8003c26:	6360      	str	r0, [r4, #52]	; 0x34
 8003c28:	e7c1      	b.n	8003bae <__sflush_r+0x1a>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	47b0      	blx	r6
 8003c30:	1c41      	adds	r1, r0, #1
 8003c32:	d1c8      	bne.n	8003bc6 <__sflush_r+0x32>
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0c5      	beq.n	8003bc6 <__sflush_r+0x32>
 8003c3a:	2b1d      	cmp	r3, #29
 8003c3c:	d001      	beq.n	8003c42 <__sflush_r+0xae>
 8003c3e:	2b16      	cmp	r3, #22
 8003c40:	d101      	bne.n	8003c46 <__sflush_r+0xb2>
 8003c42:	602f      	str	r7, [r5, #0]
 8003c44:	e7b2      	b.n	8003bac <__sflush_r+0x18>
 8003c46:	89a3      	ldrh	r3, [r4, #12]
 8003c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c4c:	81a3      	strh	r3, [r4, #12]
 8003c4e:	e7ae      	b.n	8003bae <__sflush_r+0x1a>
 8003c50:	690f      	ldr	r7, [r1, #16]
 8003c52:	2f00      	cmp	r7, #0
 8003c54:	d0aa      	beq.n	8003bac <__sflush_r+0x18>
 8003c56:	0793      	lsls	r3, r2, #30
 8003c58:	bf18      	it	ne
 8003c5a:	2300      	movne	r3, #0
 8003c5c:	680e      	ldr	r6, [r1, #0]
 8003c5e:	bf08      	it	eq
 8003c60:	694b      	ldreq	r3, [r1, #20]
 8003c62:	1bf6      	subs	r6, r6, r7
 8003c64:	600f      	str	r7, [r1, #0]
 8003c66:	608b      	str	r3, [r1, #8]
 8003c68:	2e00      	cmp	r6, #0
 8003c6a:	dd9f      	ble.n	8003bac <__sflush_r+0x18>
 8003c6c:	4633      	mov	r3, r6
 8003c6e:	463a      	mov	r2, r7
 8003c70:	4628      	mov	r0, r5
 8003c72:	6a21      	ldr	r1, [r4, #32]
 8003c74:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003c78:	47e0      	blx	ip
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	dc06      	bgt.n	8003c8c <__sflush_r+0xf8>
 8003c7e:	89a3      	ldrh	r3, [r4, #12]
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
 8003c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c88:	81a3      	strh	r3, [r4, #12]
 8003c8a:	e790      	b.n	8003bae <__sflush_r+0x1a>
 8003c8c:	4407      	add	r7, r0
 8003c8e:	1a36      	subs	r6, r6, r0
 8003c90:	e7ea      	b.n	8003c68 <__sflush_r+0xd4>
 8003c92:	bf00      	nop
 8003c94:	dfbffffe 	.word	0xdfbffffe

08003c98 <_fflush_r>:
 8003c98:	b538      	push	{r3, r4, r5, lr}
 8003c9a:	690b      	ldr	r3, [r1, #16]
 8003c9c:	4605      	mov	r5, r0
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	b913      	cbnz	r3, 8003ca8 <_fflush_r+0x10>
 8003ca2:	2500      	movs	r5, #0
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	bd38      	pop	{r3, r4, r5, pc}
 8003ca8:	b118      	cbz	r0, 8003cb2 <_fflush_r+0x1a>
 8003caa:	6a03      	ldr	r3, [r0, #32]
 8003cac:	b90b      	cbnz	r3, 8003cb2 <_fflush_r+0x1a>
 8003cae:	f7ff fa57 	bl	8003160 <__sinit>
 8003cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f3      	beq.n	8003ca2 <_fflush_r+0xa>
 8003cba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cbc:	07d0      	lsls	r0, r2, #31
 8003cbe:	d404      	bmi.n	8003cca <_fflush_r+0x32>
 8003cc0:	0599      	lsls	r1, r3, #22
 8003cc2:	d402      	bmi.n	8003cca <_fflush_r+0x32>
 8003cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cc6:	f7ff fb5d 	bl	8003384 <__retarget_lock_acquire_recursive>
 8003cca:	4628      	mov	r0, r5
 8003ccc:	4621      	mov	r1, r4
 8003cce:	f7ff ff61 	bl	8003b94 <__sflush_r>
 8003cd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cd4:	4605      	mov	r5, r0
 8003cd6:	07da      	lsls	r2, r3, #31
 8003cd8:	d4e4      	bmi.n	8003ca4 <_fflush_r+0xc>
 8003cda:	89a3      	ldrh	r3, [r4, #12]
 8003cdc:	059b      	lsls	r3, r3, #22
 8003cde:	d4e1      	bmi.n	8003ca4 <_fflush_r+0xc>
 8003ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ce2:	f7ff fb50 	bl	8003386 <__retarget_lock_release_recursive>
 8003ce6:	e7dd      	b.n	8003ca4 <_fflush_r+0xc>

08003ce8 <fiprintf>:
 8003ce8:	b40e      	push	{r1, r2, r3}
 8003cea:	b503      	push	{r0, r1, lr}
 8003cec:	4601      	mov	r1, r0
 8003cee:	ab03      	add	r3, sp, #12
 8003cf0:	4805      	ldr	r0, [pc, #20]	; (8003d08 <fiprintf+0x20>)
 8003cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cf6:	6800      	ldr	r0, [r0, #0]
 8003cf8:	9301      	str	r3, [sp, #4]
 8003cfa:	f000 f8ab 	bl	8003e54 <_vfiprintf_r>
 8003cfe:	b002      	add	sp, #8
 8003d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d04:	b003      	add	sp, #12
 8003d06:	4770      	bx	lr
 8003d08:	20000064 	.word	0x20000064

08003d0c <memmove>:
 8003d0c:	4288      	cmp	r0, r1
 8003d0e:	b510      	push	{r4, lr}
 8003d10:	eb01 0402 	add.w	r4, r1, r2
 8003d14:	d902      	bls.n	8003d1c <memmove+0x10>
 8003d16:	4284      	cmp	r4, r0
 8003d18:	4623      	mov	r3, r4
 8003d1a:	d807      	bhi.n	8003d2c <memmove+0x20>
 8003d1c:	1e43      	subs	r3, r0, #1
 8003d1e:	42a1      	cmp	r1, r4
 8003d20:	d008      	beq.n	8003d34 <memmove+0x28>
 8003d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d2a:	e7f8      	b.n	8003d1e <memmove+0x12>
 8003d2c:	4601      	mov	r1, r0
 8003d2e:	4402      	add	r2, r0
 8003d30:	428a      	cmp	r2, r1
 8003d32:	d100      	bne.n	8003d36 <memmove+0x2a>
 8003d34:	bd10      	pop	{r4, pc}
 8003d36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d3e:	e7f7      	b.n	8003d30 <memmove+0x24>

08003d40 <_sbrk_r>:
 8003d40:	b538      	push	{r3, r4, r5, lr}
 8003d42:	2300      	movs	r3, #0
 8003d44:	4d05      	ldr	r5, [pc, #20]	; (8003d5c <_sbrk_r+0x1c>)
 8003d46:	4604      	mov	r4, r0
 8003d48:	4608      	mov	r0, r1
 8003d4a:	602b      	str	r3, [r5, #0]
 8003d4c:	f7fc fd36 	bl	80007bc <_sbrk>
 8003d50:	1c43      	adds	r3, r0, #1
 8003d52:	d102      	bne.n	8003d5a <_sbrk_r+0x1a>
 8003d54:	682b      	ldr	r3, [r5, #0]
 8003d56:	b103      	cbz	r3, 8003d5a <_sbrk_r+0x1a>
 8003d58:	6023      	str	r3, [r4, #0]
 8003d5a:	bd38      	pop	{r3, r4, r5, pc}
 8003d5c:	2000028c 	.word	0x2000028c

08003d60 <memchr>:
 8003d60:	4603      	mov	r3, r0
 8003d62:	b510      	push	{r4, lr}
 8003d64:	b2c9      	uxtb	r1, r1
 8003d66:	4402      	add	r2, r0
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	d101      	bne.n	8003d72 <memchr+0x12>
 8003d6e:	2000      	movs	r0, #0
 8003d70:	e003      	b.n	8003d7a <memchr+0x1a>
 8003d72:	7804      	ldrb	r4, [r0, #0]
 8003d74:	3301      	adds	r3, #1
 8003d76:	428c      	cmp	r4, r1
 8003d78:	d1f6      	bne.n	8003d68 <memchr+0x8>
 8003d7a:	bd10      	pop	{r4, pc}

08003d7c <memcpy>:
 8003d7c:	440a      	add	r2, r1
 8003d7e:	4291      	cmp	r1, r2
 8003d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d84:	d100      	bne.n	8003d88 <memcpy+0xc>
 8003d86:	4770      	bx	lr
 8003d88:	b510      	push	{r4, lr}
 8003d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d8e:	4291      	cmp	r1, r2
 8003d90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d94:	d1f9      	bne.n	8003d8a <memcpy+0xe>
 8003d96:	bd10      	pop	{r4, pc}

08003d98 <abort>:
 8003d98:	2006      	movs	r0, #6
 8003d9a:	b508      	push	{r3, lr}
 8003d9c:	f000 fa32 	bl	8004204 <raise>
 8003da0:	2001      	movs	r0, #1
 8003da2:	f7fc fc98 	bl	80006d6 <_exit>

08003da6 <_realloc_r>:
 8003da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003daa:	4680      	mov	r8, r0
 8003dac:	4614      	mov	r4, r2
 8003dae:	460e      	mov	r6, r1
 8003db0:	b921      	cbnz	r1, 8003dbc <_realloc_r+0x16>
 8003db2:	4611      	mov	r1, r2
 8003db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003db8:	f7ff bb74 	b.w	80034a4 <_malloc_r>
 8003dbc:	b92a      	cbnz	r2, 8003dca <_realloc_r+0x24>
 8003dbe:	f7ff fb01 	bl	80033c4 <_free_r>
 8003dc2:	4625      	mov	r5, r4
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dca:	f000 fa37 	bl	800423c <_malloc_usable_size_r>
 8003dce:	4284      	cmp	r4, r0
 8003dd0:	4607      	mov	r7, r0
 8003dd2:	d802      	bhi.n	8003dda <_realloc_r+0x34>
 8003dd4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003dd8:	d812      	bhi.n	8003e00 <_realloc_r+0x5a>
 8003dda:	4621      	mov	r1, r4
 8003ddc:	4640      	mov	r0, r8
 8003dde:	f7ff fb61 	bl	80034a4 <_malloc_r>
 8003de2:	4605      	mov	r5, r0
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d0ed      	beq.n	8003dc4 <_realloc_r+0x1e>
 8003de8:	42bc      	cmp	r4, r7
 8003dea:	4622      	mov	r2, r4
 8003dec:	4631      	mov	r1, r6
 8003dee:	bf28      	it	cs
 8003df0:	463a      	movcs	r2, r7
 8003df2:	f7ff ffc3 	bl	8003d7c <memcpy>
 8003df6:	4631      	mov	r1, r6
 8003df8:	4640      	mov	r0, r8
 8003dfa:	f7ff fae3 	bl	80033c4 <_free_r>
 8003dfe:	e7e1      	b.n	8003dc4 <_realloc_r+0x1e>
 8003e00:	4635      	mov	r5, r6
 8003e02:	e7df      	b.n	8003dc4 <_realloc_r+0x1e>

08003e04 <__sfputc_r>:
 8003e04:	6893      	ldr	r3, [r2, #8]
 8003e06:	b410      	push	{r4}
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	6093      	str	r3, [r2, #8]
 8003e0e:	da07      	bge.n	8003e20 <__sfputc_r+0x1c>
 8003e10:	6994      	ldr	r4, [r2, #24]
 8003e12:	42a3      	cmp	r3, r4
 8003e14:	db01      	blt.n	8003e1a <__sfputc_r+0x16>
 8003e16:	290a      	cmp	r1, #10
 8003e18:	d102      	bne.n	8003e20 <__sfputc_r+0x1c>
 8003e1a:	bc10      	pop	{r4}
 8003e1c:	f000 b934 	b.w	8004088 <__swbuf_r>
 8003e20:	6813      	ldr	r3, [r2, #0]
 8003e22:	1c58      	adds	r0, r3, #1
 8003e24:	6010      	str	r0, [r2, #0]
 8003e26:	7019      	strb	r1, [r3, #0]
 8003e28:	4608      	mov	r0, r1
 8003e2a:	bc10      	pop	{r4}
 8003e2c:	4770      	bx	lr

08003e2e <__sfputs_r>:
 8003e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e30:	4606      	mov	r6, r0
 8003e32:	460f      	mov	r7, r1
 8003e34:	4614      	mov	r4, r2
 8003e36:	18d5      	adds	r5, r2, r3
 8003e38:	42ac      	cmp	r4, r5
 8003e3a:	d101      	bne.n	8003e40 <__sfputs_r+0x12>
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	e007      	b.n	8003e50 <__sfputs_r+0x22>
 8003e40:	463a      	mov	r2, r7
 8003e42:	4630      	mov	r0, r6
 8003e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e48:	f7ff ffdc 	bl	8003e04 <__sfputc_r>
 8003e4c:	1c43      	adds	r3, r0, #1
 8003e4e:	d1f3      	bne.n	8003e38 <__sfputs_r+0xa>
 8003e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e54 <_vfiprintf_r>:
 8003e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e58:	460d      	mov	r5, r1
 8003e5a:	4614      	mov	r4, r2
 8003e5c:	4698      	mov	r8, r3
 8003e5e:	4606      	mov	r6, r0
 8003e60:	b09d      	sub	sp, #116	; 0x74
 8003e62:	b118      	cbz	r0, 8003e6c <_vfiprintf_r+0x18>
 8003e64:	6a03      	ldr	r3, [r0, #32]
 8003e66:	b90b      	cbnz	r3, 8003e6c <_vfiprintf_r+0x18>
 8003e68:	f7ff f97a 	bl	8003160 <__sinit>
 8003e6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e6e:	07d9      	lsls	r1, r3, #31
 8003e70:	d405      	bmi.n	8003e7e <_vfiprintf_r+0x2a>
 8003e72:	89ab      	ldrh	r3, [r5, #12]
 8003e74:	059a      	lsls	r2, r3, #22
 8003e76:	d402      	bmi.n	8003e7e <_vfiprintf_r+0x2a>
 8003e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e7a:	f7ff fa83 	bl	8003384 <__retarget_lock_acquire_recursive>
 8003e7e:	89ab      	ldrh	r3, [r5, #12]
 8003e80:	071b      	lsls	r3, r3, #28
 8003e82:	d501      	bpl.n	8003e88 <_vfiprintf_r+0x34>
 8003e84:	692b      	ldr	r3, [r5, #16]
 8003e86:	b99b      	cbnz	r3, 8003eb0 <_vfiprintf_r+0x5c>
 8003e88:	4629      	mov	r1, r5
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	f000 f93a 	bl	8004104 <__swsetup_r>
 8003e90:	b170      	cbz	r0, 8003eb0 <_vfiprintf_r+0x5c>
 8003e92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e94:	07dc      	lsls	r4, r3, #31
 8003e96:	d504      	bpl.n	8003ea2 <_vfiprintf_r+0x4e>
 8003e98:	f04f 30ff 	mov.w	r0, #4294967295
 8003e9c:	b01d      	add	sp, #116	; 0x74
 8003e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ea2:	89ab      	ldrh	r3, [r5, #12]
 8003ea4:	0598      	lsls	r0, r3, #22
 8003ea6:	d4f7      	bmi.n	8003e98 <_vfiprintf_r+0x44>
 8003ea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003eaa:	f7ff fa6c 	bl	8003386 <__retarget_lock_release_recursive>
 8003eae:	e7f3      	b.n	8003e98 <_vfiprintf_r+0x44>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8003eb4:	2320      	movs	r3, #32
 8003eb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003eba:	2330      	movs	r3, #48	; 0x30
 8003ebc:	f04f 0901 	mov.w	r9, #1
 8003ec0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ec4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004074 <_vfiprintf_r+0x220>
 8003ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ecc:	4623      	mov	r3, r4
 8003ece:	469a      	mov	sl, r3
 8003ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ed4:	b10a      	cbz	r2, 8003eda <_vfiprintf_r+0x86>
 8003ed6:	2a25      	cmp	r2, #37	; 0x25
 8003ed8:	d1f9      	bne.n	8003ece <_vfiprintf_r+0x7a>
 8003eda:	ebba 0b04 	subs.w	fp, sl, r4
 8003ede:	d00b      	beq.n	8003ef8 <_vfiprintf_r+0xa4>
 8003ee0:	465b      	mov	r3, fp
 8003ee2:	4622      	mov	r2, r4
 8003ee4:	4629      	mov	r1, r5
 8003ee6:	4630      	mov	r0, r6
 8003ee8:	f7ff ffa1 	bl	8003e2e <__sfputs_r>
 8003eec:	3001      	adds	r0, #1
 8003eee:	f000 80a9 	beq.w	8004044 <_vfiprintf_r+0x1f0>
 8003ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ef4:	445a      	add	r2, fp
 8003ef6:	9209      	str	r2, [sp, #36]	; 0x24
 8003ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 80a1 	beq.w	8004044 <_vfiprintf_r+0x1f0>
 8003f02:	2300      	movs	r3, #0
 8003f04:	f04f 32ff 	mov.w	r2, #4294967295
 8003f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f0c:	f10a 0a01 	add.w	sl, sl, #1
 8003f10:	9304      	str	r3, [sp, #16]
 8003f12:	9307      	str	r3, [sp, #28]
 8003f14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f18:	931a      	str	r3, [sp, #104]	; 0x68
 8003f1a:	4654      	mov	r4, sl
 8003f1c:	2205      	movs	r2, #5
 8003f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f22:	4854      	ldr	r0, [pc, #336]	; (8004074 <_vfiprintf_r+0x220>)
 8003f24:	f7ff ff1c 	bl	8003d60 <memchr>
 8003f28:	9a04      	ldr	r2, [sp, #16]
 8003f2a:	b9d8      	cbnz	r0, 8003f64 <_vfiprintf_r+0x110>
 8003f2c:	06d1      	lsls	r1, r2, #27
 8003f2e:	bf44      	itt	mi
 8003f30:	2320      	movmi	r3, #32
 8003f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f36:	0713      	lsls	r3, r2, #28
 8003f38:	bf44      	itt	mi
 8003f3a:	232b      	movmi	r3, #43	; 0x2b
 8003f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f40:	f89a 3000 	ldrb.w	r3, [sl]
 8003f44:	2b2a      	cmp	r3, #42	; 0x2a
 8003f46:	d015      	beq.n	8003f74 <_vfiprintf_r+0x120>
 8003f48:	4654      	mov	r4, sl
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	f04f 0c0a 	mov.w	ip, #10
 8003f50:	9a07      	ldr	r2, [sp, #28]
 8003f52:	4621      	mov	r1, r4
 8003f54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f58:	3b30      	subs	r3, #48	; 0x30
 8003f5a:	2b09      	cmp	r3, #9
 8003f5c:	d94d      	bls.n	8003ffa <_vfiprintf_r+0x1a6>
 8003f5e:	b1b0      	cbz	r0, 8003f8e <_vfiprintf_r+0x13a>
 8003f60:	9207      	str	r2, [sp, #28]
 8003f62:	e014      	b.n	8003f8e <_vfiprintf_r+0x13a>
 8003f64:	eba0 0308 	sub.w	r3, r0, r8
 8003f68:	fa09 f303 	lsl.w	r3, r9, r3
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	46a2      	mov	sl, r4
 8003f70:	9304      	str	r3, [sp, #16]
 8003f72:	e7d2      	b.n	8003f1a <_vfiprintf_r+0xc6>
 8003f74:	9b03      	ldr	r3, [sp, #12]
 8003f76:	1d19      	adds	r1, r3, #4
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	9103      	str	r1, [sp, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	bfbb      	ittet	lt
 8003f80:	425b      	neglt	r3, r3
 8003f82:	f042 0202 	orrlt.w	r2, r2, #2
 8003f86:	9307      	strge	r3, [sp, #28]
 8003f88:	9307      	strlt	r3, [sp, #28]
 8003f8a:	bfb8      	it	lt
 8003f8c:	9204      	strlt	r2, [sp, #16]
 8003f8e:	7823      	ldrb	r3, [r4, #0]
 8003f90:	2b2e      	cmp	r3, #46	; 0x2e
 8003f92:	d10c      	bne.n	8003fae <_vfiprintf_r+0x15a>
 8003f94:	7863      	ldrb	r3, [r4, #1]
 8003f96:	2b2a      	cmp	r3, #42	; 0x2a
 8003f98:	d134      	bne.n	8004004 <_vfiprintf_r+0x1b0>
 8003f9a:	9b03      	ldr	r3, [sp, #12]
 8003f9c:	3402      	adds	r4, #2
 8003f9e:	1d1a      	adds	r2, r3, #4
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	9203      	str	r2, [sp, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bfb8      	it	lt
 8003fa8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fac:	9305      	str	r3, [sp, #20]
 8003fae:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004078 <_vfiprintf_r+0x224>
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	4650      	mov	r0, sl
 8003fb6:	7821      	ldrb	r1, [r4, #0]
 8003fb8:	f7ff fed2 	bl	8003d60 <memchr>
 8003fbc:	b138      	cbz	r0, 8003fce <_vfiprintf_r+0x17a>
 8003fbe:	2240      	movs	r2, #64	; 0x40
 8003fc0:	9b04      	ldr	r3, [sp, #16]
 8003fc2:	eba0 000a 	sub.w	r0, r0, sl
 8003fc6:	4082      	lsls	r2, r0
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	3401      	adds	r4, #1
 8003fcc:	9304      	str	r3, [sp, #16]
 8003fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fd2:	2206      	movs	r2, #6
 8003fd4:	4829      	ldr	r0, [pc, #164]	; (800407c <_vfiprintf_r+0x228>)
 8003fd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fda:	f7ff fec1 	bl	8003d60 <memchr>
 8003fde:	2800      	cmp	r0, #0
 8003fe0:	d03f      	beq.n	8004062 <_vfiprintf_r+0x20e>
 8003fe2:	4b27      	ldr	r3, [pc, #156]	; (8004080 <_vfiprintf_r+0x22c>)
 8003fe4:	bb1b      	cbnz	r3, 800402e <_vfiprintf_r+0x1da>
 8003fe6:	9b03      	ldr	r3, [sp, #12]
 8003fe8:	3307      	adds	r3, #7
 8003fea:	f023 0307 	bic.w	r3, r3, #7
 8003fee:	3308      	adds	r3, #8
 8003ff0:	9303      	str	r3, [sp, #12]
 8003ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ff4:	443b      	add	r3, r7
 8003ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff8:	e768      	b.n	8003ecc <_vfiprintf_r+0x78>
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004002:	e7a6      	b.n	8003f52 <_vfiprintf_r+0xfe>
 8004004:	2300      	movs	r3, #0
 8004006:	f04f 0c0a 	mov.w	ip, #10
 800400a:	4619      	mov	r1, r3
 800400c:	3401      	adds	r4, #1
 800400e:	9305      	str	r3, [sp, #20]
 8004010:	4620      	mov	r0, r4
 8004012:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004016:	3a30      	subs	r2, #48	; 0x30
 8004018:	2a09      	cmp	r2, #9
 800401a:	d903      	bls.n	8004024 <_vfiprintf_r+0x1d0>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0c6      	beq.n	8003fae <_vfiprintf_r+0x15a>
 8004020:	9105      	str	r1, [sp, #20]
 8004022:	e7c4      	b.n	8003fae <_vfiprintf_r+0x15a>
 8004024:	4604      	mov	r4, r0
 8004026:	2301      	movs	r3, #1
 8004028:	fb0c 2101 	mla	r1, ip, r1, r2
 800402c:	e7f0      	b.n	8004010 <_vfiprintf_r+0x1bc>
 800402e:	ab03      	add	r3, sp, #12
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	462a      	mov	r2, r5
 8004034:	4630      	mov	r0, r6
 8004036:	4b13      	ldr	r3, [pc, #76]	; (8004084 <_vfiprintf_r+0x230>)
 8004038:	a904      	add	r1, sp, #16
 800403a:	f3af 8000 	nop.w
 800403e:	4607      	mov	r7, r0
 8004040:	1c78      	adds	r0, r7, #1
 8004042:	d1d6      	bne.n	8003ff2 <_vfiprintf_r+0x19e>
 8004044:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004046:	07d9      	lsls	r1, r3, #31
 8004048:	d405      	bmi.n	8004056 <_vfiprintf_r+0x202>
 800404a:	89ab      	ldrh	r3, [r5, #12]
 800404c:	059a      	lsls	r2, r3, #22
 800404e:	d402      	bmi.n	8004056 <_vfiprintf_r+0x202>
 8004050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004052:	f7ff f998 	bl	8003386 <__retarget_lock_release_recursive>
 8004056:	89ab      	ldrh	r3, [r5, #12]
 8004058:	065b      	lsls	r3, r3, #25
 800405a:	f53f af1d 	bmi.w	8003e98 <_vfiprintf_r+0x44>
 800405e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004060:	e71c      	b.n	8003e9c <_vfiprintf_r+0x48>
 8004062:	ab03      	add	r3, sp, #12
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	462a      	mov	r2, r5
 8004068:	4630      	mov	r0, r6
 800406a:	4b06      	ldr	r3, [pc, #24]	; (8004084 <_vfiprintf_r+0x230>)
 800406c:	a904      	add	r1, sp, #16
 800406e:	f7ff fc6f 	bl	8003950 <_printf_i>
 8004072:	e7e4      	b.n	800403e <_vfiprintf_r+0x1ea>
 8004074:	08004449 	.word	0x08004449
 8004078:	0800444f 	.word	0x0800444f
 800407c:	08004453 	.word	0x08004453
 8004080:	00000000 	.word	0x00000000
 8004084:	08003e2f 	.word	0x08003e2f

08004088 <__swbuf_r>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	460e      	mov	r6, r1
 800408c:	4614      	mov	r4, r2
 800408e:	4605      	mov	r5, r0
 8004090:	b118      	cbz	r0, 800409a <__swbuf_r+0x12>
 8004092:	6a03      	ldr	r3, [r0, #32]
 8004094:	b90b      	cbnz	r3, 800409a <__swbuf_r+0x12>
 8004096:	f7ff f863 	bl	8003160 <__sinit>
 800409a:	69a3      	ldr	r3, [r4, #24]
 800409c:	60a3      	str	r3, [r4, #8]
 800409e:	89a3      	ldrh	r3, [r4, #12]
 80040a0:	071a      	lsls	r2, r3, #28
 80040a2:	d525      	bpl.n	80040f0 <__swbuf_r+0x68>
 80040a4:	6923      	ldr	r3, [r4, #16]
 80040a6:	b31b      	cbz	r3, 80040f0 <__swbuf_r+0x68>
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	6922      	ldr	r2, [r4, #16]
 80040ac:	b2f6      	uxtb	r6, r6
 80040ae:	1a98      	subs	r0, r3, r2
 80040b0:	6963      	ldr	r3, [r4, #20]
 80040b2:	4637      	mov	r7, r6
 80040b4:	4283      	cmp	r3, r0
 80040b6:	dc04      	bgt.n	80040c2 <__swbuf_r+0x3a>
 80040b8:	4621      	mov	r1, r4
 80040ba:	4628      	mov	r0, r5
 80040bc:	f7ff fdec 	bl	8003c98 <_fflush_r>
 80040c0:	b9e0      	cbnz	r0, 80040fc <__swbuf_r+0x74>
 80040c2:	68a3      	ldr	r3, [r4, #8]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	60a3      	str	r3, [r4, #8]
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	6022      	str	r2, [r4, #0]
 80040ce:	701e      	strb	r6, [r3, #0]
 80040d0:	6962      	ldr	r2, [r4, #20]
 80040d2:	1c43      	adds	r3, r0, #1
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d004      	beq.n	80040e2 <__swbuf_r+0x5a>
 80040d8:	89a3      	ldrh	r3, [r4, #12]
 80040da:	07db      	lsls	r3, r3, #31
 80040dc:	d506      	bpl.n	80040ec <__swbuf_r+0x64>
 80040de:	2e0a      	cmp	r6, #10
 80040e0:	d104      	bne.n	80040ec <__swbuf_r+0x64>
 80040e2:	4621      	mov	r1, r4
 80040e4:	4628      	mov	r0, r5
 80040e6:	f7ff fdd7 	bl	8003c98 <_fflush_r>
 80040ea:	b938      	cbnz	r0, 80040fc <__swbuf_r+0x74>
 80040ec:	4638      	mov	r0, r7
 80040ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040f0:	4621      	mov	r1, r4
 80040f2:	4628      	mov	r0, r5
 80040f4:	f000 f806 	bl	8004104 <__swsetup_r>
 80040f8:	2800      	cmp	r0, #0
 80040fa:	d0d5      	beq.n	80040a8 <__swbuf_r+0x20>
 80040fc:	f04f 37ff 	mov.w	r7, #4294967295
 8004100:	e7f4      	b.n	80040ec <__swbuf_r+0x64>
	...

08004104 <__swsetup_r>:
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	4b2a      	ldr	r3, [pc, #168]	; (80041b0 <__swsetup_r+0xac>)
 8004108:	4605      	mov	r5, r0
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	460c      	mov	r4, r1
 800410e:	b118      	cbz	r0, 8004118 <__swsetup_r+0x14>
 8004110:	6a03      	ldr	r3, [r0, #32]
 8004112:	b90b      	cbnz	r3, 8004118 <__swsetup_r+0x14>
 8004114:	f7ff f824 	bl	8003160 <__sinit>
 8004118:	89a3      	ldrh	r3, [r4, #12]
 800411a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800411e:	0718      	lsls	r0, r3, #28
 8004120:	d422      	bmi.n	8004168 <__swsetup_r+0x64>
 8004122:	06d9      	lsls	r1, r3, #27
 8004124:	d407      	bmi.n	8004136 <__swsetup_r+0x32>
 8004126:	2309      	movs	r3, #9
 8004128:	602b      	str	r3, [r5, #0]
 800412a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800412e:	f04f 30ff 	mov.w	r0, #4294967295
 8004132:	81a3      	strh	r3, [r4, #12]
 8004134:	e034      	b.n	80041a0 <__swsetup_r+0x9c>
 8004136:	0758      	lsls	r0, r3, #29
 8004138:	d512      	bpl.n	8004160 <__swsetup_r+0x5c>
 800413a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800413c:	b141      	cbz	r1, 8004150 <__swsetup_r+0x4c>
 800413e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004142:	4299      	cmp	r1, r3
 8004144:	d002      	beq.n	800414c <__swsetup_r+0x48>
 8004146:	4628      	mov	r0, r5
 8004148:	f7ff f93c 	bl	80033c4 <_free_r>
 800414c:	2300      	movs	r3, #0
 800414e:	6363      	str	r3, [r4, #52]	; 0x34
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004156:	81a3      	strh	r3, [r4, #12]
 8004158:	2300      	movs	r3, #0
 800415a:	6063      	str	r3, [r4, #4]
 800415c:	6923      	ldr	r3, [r4, #16]
 800415e:	6023      	str	r3, [r4, #0]
 8004160:	89a3      	ldrh	r3, [r4, #12]
 8004162:	f043 0308 	orr.w	r3, r3, #8
 8004166:	81a3      	strh	r3, [r4, #12]
 8004168:	6923      	ldr	r3, [r4, #16]
 800416a:	b94b      	cbnz	r3, 8004180 <__swsetup_r+0x7c>
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004176:	d003      	beq.n	8004180 <__swsetup_r+0x7c>
 8004178:	4621      	mov	r1, r4
 800417a:	4628      	mov	r0, r5
 800417c:	f000 f88b 	bl	8004296 <__smakebuf_r>
 8004180:	89a0      	ldrh	r0, [r4, #12]
 8004182:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004186:	f010 0301 	ands.w	r3, r0, #1
 800418a:	d00a      	beq.n	80041a2 <__swsetup_r+0x9e>
 800418c:	2300      	movs	r3, #0
 800418e:	60a3      	str	r3, [r4, #8]
 8004190:	6963      	ldr	r3, [r4, #20]
 8004192:	425b      	negs	r3, r3
 8004194:	61a3      	str	r3, [r4, #24]
 8004196:	6923      	ldr	r3, [r4, #16]
 8004198:	b943      	cbnz	r3, 80041ac <__swsetup_r+0xa8>
 800419a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800419e:	d1c4      	bne.n	800412a <__swsetup_r+0x26>
 80041a0:	bd38      	pop	{r3, r4, r5, pc}
 80041a2:	0781      	lsls	r1, r0, #30
 80041a4:	bf58      	it	pl
 80041a6:	6963      	ldrpl	r3, [r4, #20]
 80041a8:	60a3      	str	r3, [r4, #8]
 80041aa:	e7f4      	b.n	8004196 <__swsetup_r+0x92>
 80041ac:	2000      	movs	r0, #0
 80041ae:	e7f7      	b.n	80041a0 <__swsetup_r+0x9c>
 80041b0:	20000064 	.word	0x20000064

080041b4 <_raise_r>:
 80041b4:	291f      	cmp	r1, #31
 80041b6:	b538      	push	{r3, r4, r5, lr}
 80041b8:	4604      	mov	r4, r0
 80041ba:	460d      	mov	r5, r1
 80041bc:	d904      	bls.n	80041c8 <_raise_r+0x14>
 80041be:	2316      	movs	r3, #22
 80041c0:	6003      	str	r3, [r0, #0]
 80041c2:	f04f 30ff 	mov.w	r0, #4294967295
 80041c6:	bd38      	pop	{r3, r4, r5, pc}
 80041c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80041ca:	b112      	cbz	r2, 80041d2 <_raise_r+0x1e>
 80041cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80041d0:	b94b      	cbnz	r3, 80041e6 <_raise_r+0x32>
 80041d2:	4620      	mov	r0, r4
 80041d4:	f000 f830 	bl	8004238 <_getpid_r>
 80041d8:	462a      	mov	r2, r5
 80041da:	4601      	mov	r1, r0
 80041dc:	4620      	mov	r0, r4
 80041de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041e2:	f000 b817 	b.w	8004214 <_kill_r>
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d00a      	beq.n	8004200 <_raise_r+0x4c>
 80041ea:	1c59      	adds	r1, r3, #1
 80041ec:	d103      	bne.n	80041f6 <_raise_r+0x42>
 80041ee:	2316      	movs	r3, #22
 80041f0:	6003      	str	r3, [r0, #0]
 80041f2:	2001      	movs	r0, #1
 80041f4:	e7e7      	b.n	80041c6 <_raise_r+0x12>
 80041f6:	2400      	movs	r4, #0
 80041f8:	4628      	mov	r0, r5
 80041fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80041fe:	4798      	blx	r3
 8004200:	2000      	movs	r0, #0
 8004202:	e7e0      	b.n	80041c6 <_raise_r+0x12>

08004204 <raise>:
 8004204:	4b02      	ldr	r3, [pc, #8]	; (8004210 <raise+0xc>)
 8004206:	4601      	mov	r1, r0
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	f7ff bfd3 	b.w	80041b4 <_raise_r>
 800420e:	bf00      	nop
 8004210:	20000064 	.word	0x20000064

08004214 <_kill_r>:
 8004214:	b538      	push	{r3, r4, r5, lr}
 8004216:	2300      	movs	r3, #0
 8004218:	4d06      	ldr	r5, [pc, #24]	; (8004234 <_kill_r+0x20>)
 800421a:	4604      	mov	r4, r0
 800421c:	4608      	mov	r0, r1
 800421e:	4611      	mov	r1, r2
 8004220:	602b      	str	r3, [r5, #0]
 8004222:	f7fc fa48 	bl	80006b6 <_kill>
 8004226:	1c43      	adds	r3, r0, #1
 8004228:	d102      	bne.n	8004230 <_kill_r+0x1c>
 800422a:	682b      	ldr	r3, [r5, #0]
 800422c:	b103      	cbz	r3, 8004230 <_kill_r+0x1c>
 800422e:	6023      	str	r3, [r4, #0]
 8004230:	bd38      	pop	{r3, r4, r5, pc}
 8004232:	bf00      	nop
 8004234:	2000028c 	.word	0x2000028c

08004238 <_getpid_r>:
 8004238:	f7fc ba36 	b.w	80006a8 <_getpid>

0800423c <_malloc_usable_size_r>:
 800423c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004240:	1f18      	subs	r0, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	bfbc      	itt	lt
 8004246:	580b      	ldrlt	r3, [r1, r0]
 8004248:	18c0      	addlt	r0, r0, r3
 800424a:	4770      	bx	lr

0800424c <__swhatbuf_r>:
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	460c      	mov	r4, r1
 8004250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004254:	4615      	mov	r5, r2
 8004256:	2900      	cmp	r1, #0
 8004258:	461e      	mov	r6, r3
 800425a:	b096      	sub	sp, #88	; 0x58
 800425c:	da0c      	bge.n	8004278 <__swhatbuf_r+0x2c>
 800425e:	89a3      	ldrh	r3, [r4, #12]
 8004260:	2100      	movs	r1, #0
 8004262:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004266:	bf0c      	ite	eq
 8004268:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800426c:	2340      	movne	r3, #64	; 0x40
 800426e:	2000      	movs	r0, #0
 8004270:	6031      	str	r1, [r6, #0]
 8004272:	602b      	str	r3, [r5, #0]
 8004274:	b016      	add	sp, #88	; 0x58
 8004276:	bd70      	pop	{r4, r5, r6, pc}
 8004278:	466a      	mov	r2, sp
 800427a:	f000 f849 	bl	8004310 <_fstat_r>
 800427e:	2800      	cmp	r0, #0
 8004280:	dbed      	blt.n	800425e <__swhatbuf_r+0x12>
 8004282:	9901      	ldr	r1, [sp, #4]
 8004284:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004288:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800428c:	4259      	negs	r1, r3
 800428e:	4159      	adcs	r1, r3
 8004290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004294:	e7eb      	b.n	800426e <__swhatbuf_r+0x22>

08004296 <__smakebuf_r>:
 8004296:	898b      	ldrh	r3, [r1, #12]
 8004298:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800429a:	079d      	lsls	r5, r3, #30
 800429c:	4606      	mov	r6, r0
 800429e:	460c      	mov	r4, r1
 80042a0:	d507      	bpl.n	80042b2 <__smakebuf_r+0x1c>
 80042a2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042a6:	6023      	str	r3, [r4, #0]
 80042a8:	6123      	str	r3, [r4, #16]
 80042aa:	2301      	movs	r3, #1
 80042ac:	6163      	str	r3, [r4, #20]
 80042ae:	b002      	add	sp, #8
 80042b0:	bd70      	pop	{r4, r5, r6, pc}
 80042b2:	466a      	mov	r2, sp
 80042b4:	ab01      	add	r3, sp, #4
 80042b6:	f7ff ffc9 	bl	800424c <__swhatbuf_r>
 80042ba:	9900      	ldr	r1, [sp, #0]
 80042bc:	4605      	mov	r5, r0
 80042be:	4630      	mov	r0, r6
 80042c0:	f7ff f8f0 	bl	80034a4 <_malloc_r>
 80042c4:	b948      	cbnz	r0, 80042da <__smakebuf_r+0x44>
 80042c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ca:	059a      	lsls	r2, r3, #22
 80042cc:	d4ef      	bmi.n	80042ae <__smakebuf_r+0x18>
 80042ce:	f023 0303 	bic.w	r3, r3, #3
 80042d2:	f043 0302 	orr.w	r3, r3, #2
 80042d6:	81a3      	strh	r3, [r4, #12]
 80042d8:	e7e3      	b.n	80042a2 <__smakebuf_r+0xc>
 80042da:	89a3      	ldrh	r3, [r4, #12]
 80042dc:	6020      	str	r0, [r4, #0]
 80042de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e2:	81a3      	strh	r3, [r4, #12]
 80042e4:	9b00      	ldr	r3, [sp, #0]
 80042e6:	6120      	str	r0, [r4, #16]
 80042e8:	6163      	str	r3, [r4, #20]
 80042ea:	9b01      	ldr	r3, [sp, #4]
 80042ec:	b15b      	cbz	r3, 8004306 <__smakebuf_r+0x70>
 80042ee:	4630      	mov	r0, r6
 80042f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042f4:	f000 f81e 	bl	8004334 <_isatty_r>
 80042f8:	b128      	cbz	r0, 8004306 <__smakebuf_r+0x70>
 80042fa:	89a3      	ldrh	r3, [r4, #12]
 80042fc:	f023 0303 	bic.w	r3, r3, #3
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	81a3      	strh	r3, [r4, #12]
 8004306:	89a3      	ldrh	r3, [r4, #12]
 8004308:	431d      	orrs	r5, r3
 800430a:	81a5      	strh	r5, [r4, #12]
 800430c:	e7cf      	b.n	80042ae <__smakebuf_r+0x18>
	...

08004310 <_fstat_r>:
 8004310:	b538      	push	{r3, r4, r5, lr}
 8004312:	2300      	movs	r3, #0
 8004314:	4d06      	ldr	r5, [pc, #24]	; (8004330 <_fstat_r+0x20>)
 8004316:	4604      	mov	r4, r0
 8004318:	4608      	mov	r0, r1
 800431a:	4611      	mov	r1, r2
 800431c:	602b      	str	r3, [r5, #0]
 800431e:	f7fc fa28 	bl	8000772 <_fstat>
 8004322:	1c43      	adds	r3, r0, #1
 8004324:	d102      	bne.n	800432c <_fstat_r+0x1c>
 8004326:	682b      	ldr	r3, [r5, #0]
 8004328:	b103      	cbz	r3, 800432c <_fstat_r+0x1c>
 800432a:	6023      	str	r3, [r4, #0]
 800432c:	bd38      	pop	{r3, r4, r5, pc}
 800432e:	bf00      	nop
 8004330:	2000028c 	.word	0x2000028c

08004334 <_isatty_r>:
 8004334:	b538      	push	{r3, r4, r5, lr}
 8004336:	2300      	movs	r3, #0
 8004338:	4d05      	ldr	r5, [pc, #20]	; (8004350 <_isatty_r+0x1c>)
 800433a:	4604      	mov	r4, r0
 800433c:	4608      	mov	r0, r1
 800433e:	602b      	str	r3, [r5, #0]
 8004340:	f7fc fa26 	bl	8000790 <_isatty>
 8004344:	1c43      	adds	r3, r0, #1
 8004346:	d102      	bne.n	800434e <_isatty_r+0x1a>
 8004348:	682b      	ldr	r3, [r5, #0]
 800434a:	b103      	cbz	r3, 800434e <_isatty_r+0x1a>
 800434c:	6023      	str	r3, [r4, #0]
 800434e:	bd38      	pop	{r3, r4, r5, pc}
 8004350:	2000028c 	.word	0x2000028c

08004354 <_init>:
 8004354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004356:	bf00      	nop
 8004358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800435a:	bc08      	pop	{r3}
 800435c:	469e      	mov	lr, r3
 800435e:	4770      	bx	lr

08004360 <_fini>:
 8004360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004362:	bf00      	nop
 8004364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004366:	bc08      	pop	{r3}
 8004368:	469e      	mov	lr, r3
 800436a:	4770      	bx	lr
